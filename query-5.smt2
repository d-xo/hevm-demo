; Failure [PEq (Lit 0x0) (Lit 0x0),PNeg (PEq (IsZero (LT (Add (ReadWord (Lit 0x24) (AbstractBuf "txdata")) (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (ReadWord (Lit 0x4) (AbstractBuf "txdata"))) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (SStore (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (Sub (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata"))) AbstractStore))) (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (ReadWord (Lit 0x4) (AbstractBuf "txdata"))) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (SStore (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (Sub (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata"))) AbstractStore)))) (Lit 0x0)),PNeg (PEq (IsZero (LT (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (Sub (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata"))))) (Lit 0x0)),PNeg (PEq (IsZero (IsZero (Eq (Caller 0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0))))) (Lit 0x0)),PNeg (PEq (Eq (Caller 0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0))) (Lit 0x0)),PNeg (PEq (IsZero (LT (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata")))) (Lit 0x0)),PNeg (PEq (Eq (ReadWord (Lit 0x4) (AbstractBuf "txdata")) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (ReadWord (Lit 0x4) (AbstractBuf "txdata")))) (Lit 0x0)),PNeg (PEq (IsZero (SLT (Sub (BufLength (AbstractBuf "txdata")) (Lit 0x4)) (Lit 0x40))) (Lit 0x0)),PNeg (PEq (Eq (Lit 0xa9059cbb) (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata")))) (Lit 0x0)),PEq (Eq (Lit 0x9dc29fac) (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata")))) (Lit 0x0),PEq (LT (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata"))) (Lit 0x9dc29fac)) (Lit 0x0),PEq (LT (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata"))) (Lit 0x70a08231)) (Lit 0x0),PEq (LT (BufLength (AbstractBuf "txdata")) (Lit 0x4)) (Lit 0x0),PNeg (PEq (IsZero (CallValue 0)) (Lit 0x0)),PLT (BufLength (AbstractBuf "txdata")) (Lit 0x10000000000000000),PNeg (PEq (IsZero (LT (Add (ReadWord (Lit 0x24) (AbstractBuf "txdata")) (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (ReadWord (Lit 0x4) (AbstractBuf "txdata"))) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (SStore (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (Sub (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata"))) AbstractStore))) (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (ReadWord (Lit 0x4) (AbstractBuf "txdata"))) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (SStore (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) (Sub (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata"))) AbstractStore)))) (Lit 0x0)),PNeg (PEq (IsZero (LT (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (Sub (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata"))))) (Lit 0x0)),PNeg (PEq (IsZero (IsZero (Eq (Caller 0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0))))) (Lit 0x0)),PNeg (PEq (Eq (Caller 0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0))) (Lit 0x0)),PNeg (PEq (IsZero (LT (SLoad (Lit 0xacab) (Keccak (CopySlice (Lit 0x0) (Lit 0x0) (Lit 0x40) (WriteWord (Lit 0x0) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0)) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\128")) (ConcreteBuf ""))) AbstractStore) (ReadWord (Lit 0x24) (AbstractBuf "txdata")))) (Lit 0x0)),PNeg (PEq (Eq (ReadWord (Lit 0x4) (AbstractBuf "txdata")) (And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (ReadWord (Lit 0x4) (AbstractBuf "txdata")))) (Lit 0x0)),PNeg (PEq (IsZero (SLT (Sub (BufLength (AbstractBuf "txdata")) (Lit 0x4)) (Lit 0x40))) (Lit 0x0)),PNeg (PEq (Eq (Lit 0xa9059cbb) (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata")))) (Lit 0x0)),PEq (Eq (Lit 0x9dc29fac) (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata")))) (Lit 0x0),PEq (LT (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata"))) (Lit 0x9dc29fac)) (Lit 0x0),PEq (LT (JoinBytes (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (LitByte 0) (ReadByte (Lit 0x0) (AbstractBuf "txdata")) (ReadByte (Lit 0x1) (AbstractBuf "txdata")) (ReadByte (Lit 0x2) (AbstractBuf "txdata")) (ReadByte (Lit 0x3) (AbstractBuf "txdata"))) (Lit 0x70a08231)) (Lit 0x0),PEq (LT (BufLength (AbstractBuf "txdata")) (Lit 0x4)) (Lit 0x0),PNeg (PEq (IsZero (CallValue 0)) (Lit 0x0))] (Traces {traces = [Node {rootLabel = Trace {opIx = 1343, contract = Contract {contractcode = RuntimeCode (ConcreteRuntimeCode "`\128`@R4\128\NAKa\NUL\DLEW`\NUL\128\253[P`\EOT6\DLEa\NUL\245W`\NUL5`\224\FS\128cp\160\130\&1\DC1a\NUL\151W\128c\157\194\159\172\DC1a\NULfW\128c\157\194\159\172\DC4a\STX8W\128c\169\ENQ\156\187\DC4a\STXKW\128c\191\&5=\187\DC4a\STX^W\128c\221b\237>\DC4a\STX~W`\NUL\128\253[\128cp\160\130\&1\DC4a\SOH\195W\128c~\206\190\NUL\DC4a\SOH\227W\128c\149\216\155A\DC4a\STX\ETXW\128c\156R\167\241\DC4a\STX%W`\NUL\128\253[\128c#\184r\221\DC1a\NUL\211W\128c#\184r\221\DC4a\SOHnW\128c1<\229g\DC4a\SOH\129W\128c@\193\SI\EM\DC4a\SOH\155W\128ce\250\227^\DC4a\SOH\176W`\NUL\128\253[\128c\ACK\253\222\ETX\DC4a\NUL\250W\128c\t^\167\179\DC4a\SOH4W\128c\CAN\SYN\r\221\DC4a\SOHWW[`\NUL\128\253[a\SOH\RS`@Q\128`@\SOH`@R\128`\ENQ\129R` \SOHd*7\181\178\183`\217\ESC\129RP\129V[`@Qa\SOH+\145\144a\bnV[`@Q\128\145\ETX\144\243[a\SOHGa\SOHB6`\EOTa\b\216V[a\STX\169V[`@Q\144\NAK\NAK\129R` \SOHa\SOH+V[a\SOH``\SOHT\129V[`@Q\144\129R` \SOHa\SOH+V[a\SOHGa\SOH|6`\EOTa\t\STXV[a\ETX\SYNV[a\SOH\137`\DC2\129V[`@Q`\255\144\145\SYN\129R` \SOHa\SOH+V[a\SOH\174a\SOH\169\&6`\EOTa\b\216V[a\ETX<V[\NUL[a\SOH\174a\SOH\190\&6`\EOTa\t>V[a\EOT\NULV[a\SOH`a\SOH\209\&6`\EOTa\t>V[`\STX` R`\NUL\144\129R`@\144 T\129V[a\SOH`a\SOH\241\&6`\EOTa\t>V[`\EOT` R`\NUL\144\129R`@\144 T\129V[a\SOH\RS`@Q\128`@\SOH`@R\128`\ETX\129R` \SOHb*%\167`\233\ESC\129RP\129V[a\SOH\174a\STX36`\EOTa\t>V[a\EOTLV[a\SOH\174a\STXF6`\EOTa\b\216V[a\EOT\149V[a\SOHGa\STXY6`\EOTa\b\216V[a\ACK`V[a\SOH`a\STXl6`\EOTa\t>V[`\NUL` \129\144R\144\129R`@\144 T\129V[a\SOH`a\STX\140\&6`\EOTa\tYV[`\ETX` \144\129R`\NUL\146\131R`@\128\132 \144\145R\144\130R\144 T\129V[3`\NUL\129\129R`\ETX` \144\129R`@\128\131 `\SOH`\SOH`\160\ESC\ETX\135\SYN\128\133R\146R\128\131 \133\144UQ\145\146\144\145\DEL\140[\225\229\235\236}[\209OqB}\RS\132\243\221\ETX\DC4\192\247\178)\RS[ \n\200\199\195\185%\144a\ETX\EOT\144\134\129R` \SOH\144V[`@Q\128\145\ETX\144\163P`\SOH[\146\145PPV[`\NUL\128a\ETX$\133\133\133a\ACKtV[\144P\128\NAKa\ETX4Wa\ETX4a\t\140V[\148\147PPPPV[3`\NUL\144\129R` \129\144R`@\144 T`\SOH\DC4a\ETXtW`@QbF\ESC\205`\229\ESC\129R`\EOT\SOHa\ETXk\144a\t\162V[`@Q\128\145\ETX\144\253[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\STX` R`@\129 \128T\131\146\144a\ETX\156\144\132\144a\t\224V[\146PP\129\144UP\128`\SOH`\NUL\130\130Ta\ETX\181\145\144a\t\224V[\144\145UPP`@Q\129\129R`\SOH`\SOH`\160\ESC\ETX\131\SYN\144`\NUL\144\DEL\221\242R\173\ESC\226\200\155i\194\176h\252\&7\141\170\149+\167\241c\196\161\SYN(\245ZM\245#\179\239\144` \SOH[`@Q\128\145\ETX\144\163PPV[3`\NUL\144\129R` \129\144R`@\144 T`\SOH\DC4a\EOT/W`@QbF\ESC\205`\229\ESC\129R`\EOT\SOHa\ETXk\144a\t\162V[`\SOH`\SOH`\160\ESC\ETX\SYN`\NUL\144\129R` \129\144R`@\144 `\SOH\144UV[3`\NUL\144\129R` \129\144R`@\144 T`\SOH\DC4a\EOT{W`@QbF\ESC\205`\229\ESC\129R`\EOT\SOHa\ETXk\144a\t\162V[`\SOH`\SOH`\160\ESC\ETX\SYN`\NUL\144\129R` \129\144R`@\129 UV[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\STX` R`@\144 T\129\DC1\NAKa\EOT\244W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\DC4`$\130\SOHRsinsufficient-balance``\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\130\SYN3\DC4\128\NAK\144a\ENQ2WP`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T`\NUL\EM\DC4\NAK[\NAKa\ENQ\220W`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T\129\DC1\NAKa\ENQ\163W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\SYN`$\130\SOHRuinsufficient-allowance`P\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\129 \128T\131\146\144a\ENQ\214\144\132\144a\t\243V[\144\145UPP[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\STX` R`@\129 \128T\131\146\144a\ACK\EOT\144\132\144a\t\243V[\146PP\129\144UP\128`\SOH`\NUL\130\130Ta\ACK\GS\145\144a\t\243V[\144\145UPP`@Q\129\129R`\NUL\144`\SOH`\SOH`\160\ESC\ETX\132\SYN\144\DEL\221\242R\173\ESC\226\200\155i\194\176h\252\&7\141\170\149+\167\241c\196\161\SYN(\245ZM\245#\179\239\144` \SOHa\ETX\244V[`\NULa\ACKm3\132\132a\ETX\SYNV[\147\146PPPV[`\SOH`\SOH`\160\ESC\ETX\131\SYN`\NUL\144\129R`\STX` R`@\129 T\130\DC1\NAKa\ACK\211W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\DC4`$\130\SOHRsinsufficient-balance``\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\132\SYN3\DC4\128\NAK\144a\a\DC1WP`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T`\NUL\EM\DC4\NAK[\NAKa\a\187W`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T\130\DC1\NAKa\a\130W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\SYN`$\130\SOHRuinsufficient-allowance`P\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\129 \128T\132\146\144a\a\181\144\132\144a\t\243V[\144\145UPP[`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\STX` R`@\129 \128T\132\146\144a\a\227\144\132\144a\t\243V[\144\145UPP`\SOH`\SOH`\160\ESC\ETX\131\SYN`\NUL\144\129R`\STX` R`@\129 \128T\132\146\144a\b\DLE\144\132\144a\t\224V[\146PP\129\144UP\130`\SOH`\SOH`\160\ESC\ETX\SYN\132`\SOH`\SOH`\160\ESC\ETX\SYN\DEL\221\242R\173\ESC\226\200\155i\194\176h\252\&7\141\170\149+\167\241c\196\161\SYN(\245ZM\245#\179\239\132`@Qa\b\\\145\129R` \SOH\144V[`@Q\128\145\ETX\144\163P`\SOH\147\146PPPV[`\NUL` \128\131R\131Q\128\130\133\SOHR`\NUL[\129\129\DLE\NAKa\b\155W\133\129\SOH\131\SOHQ\133\130\SOH`@\SOHR\130\SOHa\b\DELV[P`\NUL`@\130\134\SOH\SOHR`@`\US\EM`\US\131\SOH\SYN\133\SOH\SOH\146PPP\146\145PPV[\128\&5`\SOH`\SOH`\160\ESC\ETX\129\SYN\129\DC4a\b\211W`\NUL\128\253[\145\144PV[`\NUL\128`@\131\133\ETX\DC2\NAKa\b\235W`\NUL\128\253[a\b\244\131a\b\188V[\148` \147\144\147\SOH5\147PPPV[`\NUL\128`\NUL``\132\134\ETX\DC2\NAKa\t\ETBW`\NUL\128\253[a\t \132a\b\188V[\146Pa\t.` \133\SOHa\b\188V[\145P`@\132\SOH5\144P\146P\146P\146V[`\NUL` \130\132\ETX\DC2\NAKa\tPW`\NUL\128\253[a\ACKm\130a\b\188V[`\NUL\128`@\131\133\ETX\DC2\NAKa\tlW`\NUL\128\253[a\tu\131a\b\188V[\145Pa\t\131` \132\SOHa\b\188V[\144P\146P\146\144PV[cNH{q`\224\ESC`\NULR`\SOH`\EOTR`$`\NUL\253[` \128\130R`\SO\144\130\SOHRm\ESC\155\221\vX]]\SUB\ESC\220\154^\153Y`\146\ESC`@\130\SOHR``\SOH\144V[cNH{q`\224\ESC`\NULR`\DC1`\EOTR`$`\NUL\253[\128\130\SOH\128\130\DC1\NAKa\ETX\DLEWa\ETX\DLEa\t\202V[\129\129\ETX\129\129\DC1\NAKa\ETX\DLEWa\ETX\DLEa\t\202V\254\162dipfsX\"\DC2 \214L\171\133\187\138\DEL\142\136(\166\236\216\147I\208\\\141\179\217\n\190\129f\207\173^\EOT\SYN_7@dsolcC\NUL\b\DC4\NUL3"), balance = 0x0, nonce = 0x0, codehash = Lit 0x700cccf2eabbaf54d8633df4864594968131e011198ab9289b6c45da3adf0ced, opIxMap = [0,0,1,1,2,3,4,5,6,6,6,7,8,8,9,10,11,12,13,13,14,15,16,16,16,17,18,18,19,20,20,21,22,23,23,23,23,23,24,25,25,25,26,27,28,28,28,28,28,29,30,30,30,31,32,33,33,33,33,33,34,35,35,35,36,37,38,38,38,38,38,39,40,40,40,41,42,43,43,43,43,43,44,45,45,45,46,47,48,48,48,48,48,49,50,50,50,51,52,52,53,54,55,56,57,57,57,57,57,58,59,59,59,60,61,62,62,62,62,62,63,64,64,64,65,66,67,67,67,67,67,68,69,69,69,70,71,72,72,72,72,72,73,74,74,74,75,76,76,77,78,79,80,81,81,81,81,81,82,83,83,83,84,85,86,86,86,86,86,87,88,88,88,89,90,91,91,91,91,91,92,93,93,93,94,95,96,96,96,96,96,97,98,98,98,99,100,101,101,101,101,101,102,103,103,103,104,105,105,106,107,108,109,110,110,110,110,110,111,112,112,112,113,114,115,115,115,115,115,116,117,117,117,118,119,120,120,120,120,120,121,122,122,122,123,124,125,125,126,127,128,129,129,129,130,130,131,132,133,133,134,135,135,136,137,138,138,139,140,141,141,142,143,143,143,143,143,143,144,144,145,146,147,148,149,150,151,152,152,153,154,154,154,155,156,157,157,157,158,159,160,160,161,162,163,164,165,166,167,168,168,168,169,169,169,170,171,171,172,172,172,173,174,175,175,175,176,177,178,178,179,180,181,182,183,184,185,185,186,187,187,187,188,189,190,190,190,191,191,192,193,194,195,196,196,197,198,199,200,201,201,202,203,203,203,204,205,206,206,206,207,207,207,208,209,209,210,210,210,211,212,213,213,213,214,215,216,216,216,217,217,218,219,220,221,221,222,223,223,224,225,226,227,228,229,229,230,231,231,231,232,233,234,234,234,235,235,235,236,237,237,238,238,238,239,240,241,241,241,242,243,244,245,246,246,246,247,247,247,248,249,249,250,250,250,251,252,253,253,253,254,255,256,256,256,257,257,257,258,259,259,260,260,260,261,262,263,263,264,264,265,266,266,267,268,269,270,270,271,272,273,274,275,276,277,277,277,278,278,278,279,280,280,281,281,281,282,283,284,284,285,285,286,287,287,288,289,290,291,291,292,293,294,295,296,297,298,298,298,299,299,300,301,302,302,303,304,304,305,306,307,307,308,309,310,310,311,312,312,312,312,313,313,314,315,316,317,318,319,320,321,321,321,322,322,322,323,324,324,325,325,325,326,327,328,328,328,329,330,331,331,331,332,332,332,333,334,334,335,335,335,336,337,338,338,338,339,340,341,341,341,342,342,342,343,344,344,345,345,345,346,347,348,348,348,349,350,351,351,351,352,352,352,353,354,354,355,355,355,356,357,358,358,359,359,360,361,362,363,364,365,366,366,367,368,369,370,371,372,373,373,373,374,374,374,375,376,376,377,377,377,378,379,380,380,381,381,382,383,384,385,385,386,387,388,389,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,406,407,408,409,410,410,411,411,412,413,414,415,415,416,417,418,419,419,420,420,421,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,443,444,444,444,445,446,447,448,449,449,450,451,452,453,454,454,455,456,457,458,459,460,461,462,462,463,464,465,466,467,468,469,470,470,471,472,472,472,473,474,475,476,476,476,477,478,479,480,481,482,483,483,483,484,485,485,485,486,486,486,487,488,489,490,491,492,493,494,495,496,497,498,498,499,500,501,502,502,503,504,505,506,506,507,508,509,510,510,511,512,512,512,513,514,514,515,516,516,516,516,517,517,518,519,520,521,521,522,523,523,523,524,525,525,525,526,527,528,528,529,530,531,532,533,534,535,536,536,537,537,538,538,539,540,541,542,543,543,544,545,546,547,547,548,548,549,550,550,551,552,553,554,555,556,557,558,558,558,559,560,561,562,562,562,563,564,565,566,567,568,569,570,571,572,573,573,574,574,575,576,577,578,578,578,579,580,581,581,581,582,583,584,585,586,587,588,589,589,590,591,592,593,594,594,595,595,596,596,597,598,599,600,601,602,602,603,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,605,606,606,607,608,609,609,610,611,612,613,614,615,616,617,618,619,620,621,621,622,623,624,625,625,626,627,628,629,629,630,631,632,633,633,634,635,635,635,636,637,637,638,639,639,639,639,640,640,641,642,643,644,644,645,646,646,646,647,648,648,648,649,650,651,651,652,652,653,653,654,655,656,657,657,658,659,660,661,661,662,663,664,665,665,666,667,668,668,669,670,671,672,673,674,674,675,676,677,678,678,679,680,681,682,682,683,684,685,686,686,687,688,688,688,689,690,690,691,692,692,692,692,693,693,694,695,696,697,697,698,699,699,699,700,701,701,701,702,703,704,704,705,705,706,706,707,708,709,710,710,711,712,713,714,714,715,716,717,718,718,719,720,721,722,723,724,724,725,725,726,726,727,728,729,730,731,731,732,733,734,735,735,736,736,737,738,738,739,740,741,742,743,744,745,745,745,746,747,747,748,749,749,749,749,750,750,751,752,753,754,754,755,755,756,757,758,759,759,760,760,761,762,763,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,765,765,766,767,767,768,769,770,771,771,772,773,773,773,774,775,776,776,777,777,778,778,779,780,781,782,783,784,785,786,787,788,788,788,789,790,791,791,792,792,793,793,794,795,796,797,798,798,799,800,801,802,802,803,803,804,805,806,807,807,808,809,810,811,812,813,814,815,816,817,818,819,820,820,821,822,823,824,825,826,826,826,827,828,828,829,829,830,830,831,832,833,834,835,835,836,837,838,839,839,840,840,841,842,843,844,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,860,860,861,862,862,863,864,864,864,864,865,865,866,867,868,869,869,870,870,871,872,873,874,874,875,875,876,877,878,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,880,880,881,882,882,883,884,885,886,886,887,888,888,888,889,890,891,891,892,892,893,893,894,895,896,897,898,898,899,900,901,902,902,903,903,904,905,906,907,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,924,924,925,926,927,928,928,928,929,930,931,932,933,934,935,936,937,937,938,938,939,939,940,941,942,943,944,944,945,946,947,948,948,949,949,950,951,951,952,953,954,955,956,957,958,959,959,959,960,961,962,963,963,963,964,965,966,967,968,969,970,971,972,973,974,974,975,975,976,977,978,979,979,979,980,981,982,982,982,983,984,985,986,987,988,989,990,990,991,992,993,994,995,995,996,997,997,998,998,999,999,1000,1001,1002,1003,1004,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1006,1007,1007,1008,1009,1009,1009,1010,1011,1012,1012,1013,1013,1013,1014,1015,1016,1017,1017,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1027,1028,1028,1029,1029,1030,1031,1032,1033,1034,1034,1035,1036,1037,1038,1038,1039,1039,1040,1041,1041,1042,1043,1044,1045,1046,1047,1048,1048,1048,1049,1050,1050,1051,1052,1052,1052,1052,1053,1053,1054,1055,1056,1057,1057,1058,1058,1059,1060,1061,1062,1062,1063,1063,1064,1065,1066,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1068,1068,1069,1070,1070,1071,1072,1073,1074,1074,1075,1076,1076,1076,1077,1078,1079,1079,1080,1080,1081,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1091,1091,1092,1093,1094,1094,1095,1095,1096,1096,1097,1098,1099,1100,1101,1101,1102,1103,1104,1105,1105,1106,1106,1107,1108,1109,1110,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1123,1124,1125,1126,1127,1128,1129,1129,1129,1130,1131,1131,1132,1132,1133,1133,1134,1135,1136,1137,1138,1138,1139,1140,1141,1142,1142,1143,1143,1144,1145,1146,1147,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1163,1163,1164,1165,1165,1166,1167,1167,1167,1167,1168,1168,1169,1170,1171,1172,1172,1173,1173,1174,1175,1176,1177,1177,1178,1178,1179,1180,1181,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1183,1183,1184,1185,1185,1186,1187,1188,1189,1189,1190,1191,1191,1191,1192,1193,1194,1194,1195,1195,1196,1196,1197,1198,1199,1200,1201,1201,1202,1203,1204,1205,1205,1206,1206,1207,1208,1209,1210,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1227,1227,1228,1229,1230,1231,1231,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1240,1241,1241,1242,1242,1243,1244,1245,1246,1247,1247,1248,1249,1250,1251,1251,1252,1252,1253,1254,1254,1255,1256,1257,1258,1259,1260,1261,1262,1262,1262,1263,1264,1265,1266,1266,1266,1267,1268,1269,1270,1271,1272,1273,1274,1274,1275,1275,1276,1276,1277,1278,1279,1280,1281,1281,1282,1283,1284,1285,1285,1286,1286,1287,1288,1288,1289,1290,1291,1292,1293,1294,1295,1296,1296,1296,1297,1298,1299,1300,1300,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1311,1312,1312,1313,1313,1314,1315,1316,1317,1318,1318,1319,1319,1320,1320,1321,1322,1323,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1325,1326,1326,1327,1328,1328,1328,1329,1330,1331,1332,1332,1333,1334,1335,1336,1337,1337,1338,1339,1340,1341,1342,1343,1344,1345,1345,1346,1347,1348,1349,1350,1351,1352,1353,1353,1354,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1365,1366,1367,1368,1369,1370,1371,1371,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1382,1383,1384,1385,1386,1387,1387,1387,1388,1389,1390,1391,1391,1392,1392,1393,1394,1395,1396,1397,1398,1398,1399,1399,1400,1401,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1420,1421,1421,1422,1422,1423,1424,1425,1426,1427,1428,1429,1429,1429,1430,1431,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1440,1441,1442,1442,1443,1444,1445,1446,1447,1448,1448,1448,1449,1450,1450,1451,1452,1453,1454,1454,1454,1455,1456,1456,1456,1457,1458,1459,1460,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1472,1473,1474,1474,1475,1475,1476,1477,1478,1479,1480,1481,1481,1481,1482,1483,1483,1484,1485,1486,1487,1487,1487,1488,1489,1489,1489,1490,1491,1492,1493,1494,1494,1494,1495,1495,1496,1497,1498,1498,1498,1499,1500,1501,1502,1503,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1516,1517,1517,1518,1519,1520,1521,1522,1523,1523,1523,1524,1525,1525,1526,1527,1528,1529,1529,1529,1530,1531,1531,1531,1532,1533,1534,1534,1535,1536,1536,1537,1538,1539,1540,1541,1542,1542,1542,1543,1544,1544,1545,1546,1547,1548,1548,1548,1549,1550,1550,1550,1551,1552,1553,1554,1555,1555,1555,1556,1556,1557,1558,1559,1559,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1571,1571,1571,1571,1572,1572,1573,1574,1574,1575,1576,1576,1577,1577,1578,1579,1579,1580,1580,1581,1582,1583,1583,1584,1585,1586,1587,1587,1588,1589,1590,1591,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1593,1593,1594,1595,1595,1596,1597,1598,1599,1599,1600,1601,1602,1603,1604,1604,1604,1604,1604,1605,1605,1606,1607,1607,1608,1609,1609,1610,1610,1611,1612,1612,1613,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1623,1623,1624,1625,1625,1625,1626,1626,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1636,1636,1637,1638,1638,1638,1639,1639,1639,1640,1641,1642,1643,1643,1643,1643,1643,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1654,1655,1656,1657], codeOps = [(0,OpPush (Lit 0x80)),(2,OpPush (Lit 0x40)),(4,OpMstore),(5,OpCallvalue),(6,OpDup 1),(7,OpIszero),(8,OpPush (Lit 0x10)),(11,OpJumpi),(12,OpPush (Lit 0x0)),(14,OpDup 1),(15,OpRevert),(16,OpJumpdest),(17,OpPop),(18,OpPush (Lit 0x4)),(20,OpCalldatasize),(21,OpLt),(22,OpPush (Lit 0xf5)),(25,OpJumpi),(26,OpPush (Lit 0x0)),(28,OpCalldataload),(29,OpPush (Lit 0xe0)),(31,OpShr),(32,OpDup 1),(33,OpPush (Lit 0x70a08231)),(38,OpGt),(39,OpPush (Lit 0x97)),(42,OpJumpi),(43,OpDup 1),(44,OpPush (Lit 0x9dc29fac)),(49,OpGt),(50,OpPush (Lit 0x66)),(53,OpJumpi),(54,OpDup 1),(55,OpPush (Lit 0x9dc29fac)),(60,OpEq),(61,OpPush (Lit 0x238)),(64,OpJumpi),(65,OpDup 1),(66,OpPush (Lit 0xa9059cbb)),(71,OpEq),(72,OpPush (Lit 0x24b)),(75,OpJumpi),(76,OpDup 1),(77,OpPush (Lit 0xbf353dbb)),(82,OpEq),(83,OpPush (Lit 0x25e)),(86,OpJumpi),(87,OpDup 1),(88,OpPush (Lit 0xdd62ed3e)),(93,OpEq),(94,OpPush (Lit 0x27e)),(97,OpJumpi),(98,OpPush (Lit 0x0)),(100,OpDup 1),(101,OpRevert),(102,OpJumpdest),(103,OpDup 1),(104,OpPush (Lit 0x70a08231)),(109,OpEq),(110,OpPush (Lit 0x1c3)),(113,OpJumpi),(114,OpDup 1),(115,OpPush (Lit 0x7ecebe00)),(120,OpEq),(121,OpPush (Lit 0x1e3)),(124,OpJumpi),(125,OpDup 1),(126,OpPush (Lit 0x95d89b41)),(131,OpEq),(132,OpPush (Lit 0x203)),(135,OpJumpi),(136,OpDup 1),(137,OpPush (Lit 0x9c52a7f1)),(142,OpEq),(143,OpPush (Lit 0x225)),(146,OpJumpi),(147,OpPush (Lit 0x0)),(149,OpDup 1),(150,OpRevert),(151,OpJumpdest),(152,OpDup 1),(153,OpPush (Lit 0x23b872dd)),(158,OpGt),(159,OpPush (Lit 0xd3)),(162,OpJumpi),(163,OpDup 1),(164,OpPush (Lit 0x23b872dd)),(169,OpEq),(170,OpPush (Lit 0x16e)),(173,OpJumpi),(174,OpDup 1),(175,OpPush (Lit 0x313ce567)),(180,OpEq),(181,OpPush (Lit 0x181)),(184,OpJumpi),(185,OpDup 1),(186,OpPush (Lit 0x40c10f19)),(191,OpEq),(192,OpPush (Lit 0x19b)),(195,OpJumpi),(196,OpDup 1),(197,OpPush (Lit 0x65fae35e)),(202,OpEq),(203,OpPush (Lit 0x1b0)),(206,OpJumpi),(207,OpPush (Lit 0x0)),(209,OpDup 1),(210,OpRevert),(211,OpJumpdest),(212,OpDup 1),(213,OpPush (Lit 0x6fdde03)),(218,OpEq),(219,OpPush (Lit 0xfa)),(222,OpJumpi),(223,OpDup 1),(224,OpPush (Lit 0x95ea7b3)),(229,OpEq),(230,OpPush (Lit 0x134)),(233,OpJumpi),(234,OpDup 1),(235,OpPush (Lit 0x18160ddd)),(240,OpEq),(241,OpPush (Lit 0x157)),(244,OpJumpi),(245,OpJumpdest),(246,OpPush (Lit 0x0)),(248,OpDup 1),(249,OpRevert),(250,OpJumpdest),(251,OpPush (Lit 0x11e)),(254,OpPush (Lit 0x40)),(256,OpMload),(257,OpDup 1),(258,OpPush (Lit 0x40)),(260,OpAdd),(261,OpPush (Lit 0x40)),(263,OpMstore),(264,OpDup 1),(265,OpPush (Lit 0x5)),(267,OpDup 2),(268,OpMstore),(269,OpPush (Lit 0x20)),(271,OpAdd),(272,OpPush (Lit 0x2a37b5b2b7)),(278,OpPush (Lit 0xd9)),(280,OpShl),(281,OpDup 2),(282,OpMstore),(283,OpPop),(284,OpDup 2),(285,OpJump),(286,OpJumpdest),(287,OpPush (Lit 0x40)),(289,OpMload),(290,OpPush (Lit 0x12b)),(293,OpSwap 2),(294,OpSwap 1),(295,OpPush (Lit 0x86e)),(298,OpJump),(299,OpJumpdest),(300,OpPush (Lit 0x40)),(302,OpMload),(303,OpDup 1),(304,OpSwap 2),(305,OpSub),(306,OpSwap 1),(307,OpReturn),(308,OpJumpdest),(309,OpPush (Lit 0x147)),(312,OpPush (Lit 0x142)),(315,OpCalldatasize),(316,OpPush (Lit 0x4)),(318,OpPush (Lit 0x8d8)),(321,OpJump),(322,OpJumpdest),(323,OpPush (Lit 0x2a9)),(326,OpJump),(327,OpJumpdest),(328,OpPush (Lit 0x40)),(330,OpMload),(331,OpSwap 1),(332,OpIszero),(333,OpIszero),(334,OpDup 2),(335,OpMstore),(336,OpPush (Lit 0x20)),(338,OpAdd),(339,OpPush (Lit 0x12b)),(342,OpJump),(343,OpJumpdest),(344,OpPush (Lit 0x160)),(347,OpPush (Lit 0x1)),(349,OpSload),(350,OpDup 2),(351,OpJump),(352,OpJumpdest),(353,OpPush (Lit 0x40)),(355,OpMload),(356,OpSwap 1),(357,OpDup 2),(358,OpMstore),(359,OpPush (Lit 0x20)),(361,OpAdd),(362,OpPush (Lit 0x12b)),(365,OpJump),(366,OpJumpdest),(367,OpPush (Lit 0x147)),(370,OpPush (Lit 0x17c)),(373,OpCalldatasize),(374,OpPush (Lit 0x4)),(376,OpPush (Lit 0x902)),(379,OpJump),(380,OpJumpdest),(381,OpPush (Lit 0x316)),(384,OpJump),(385,OpJumpdest),(386,OpPush (Lit 0x189)),(389,OpPush (Lit 0x12)),(391,OpDup 2),(392,OpJump),(393,OpJumpdest),(394,OpPush (Lit 0x40)),(396,OpMload),(397,OpPush (Lit 0xff)),(399,OpSwap 1),(400,OpSwap 2),(401,OpAnd),(402,OpDup 2),(403,OpMstore),(404,OpPush (Lit 0x20)),(406,OpAdd),(407,OpPush (Lit 0x12b)),(410,OpJump),(411,OpJumpdest),(412,OpPush (Lit 0x1ae)),(415,OpPush (Lit 0x1a9)),(418,OpCalldatasize),(419,OpPush (Lit 0x4)),(421,OpPush (Lit 0x8d8)),(424,OpJump),(425,OpJumpdest),(426,OpPush (Lit 0x33c)),(429,OpJump),(430,OpJumpdest),(431,OpStop),(432,OpJumpdest),(433,OpPush (Lit 0x1ae)),(436,OpPush (Lit 0x1be)),(439,OpCalldatasize),(440,OpPush (Lit 0x4)),(442,OpPush (Lit 0x93e)),(445,OpJump),(446,OpJumpdest),(447,OpPush (Lit 0x400)),(450,OpJump),(451,OpJumpdest),(452,OpPush (Lit 0x160)),(455,OpPush (Lit 0x1d1)),(458,OpCalldatasize),(459,OpPush (Lit 0x4)),(461,OpPush (Lit 0x93e)),(464,OpJump),(465,OpJumpdest),(466,OpPush (Lit 0x2)),(468,OpPush (Lit 0x20)),(470,OpMstore),(471,OpPush (Lit 0x0)),(473,OpSwap 1),(474,OpDup 2),(475,OpMstore),(476,OpPush (Lit 0x40)),(478,OpSwap 1),(479,OpSha3),(480,OpSload),(481,OpDup 2),(482,OpJump),(483,OpJumpdest),(484,OpPush (Lit 0x160)),(487,OpPush (Lit 0x1f1)),(490,OpCalldatasize),(491,OpPush (Lit 0x4)),(493,OpPush (Lit 0x93e)),(496,OpJump),(497,OpJumpdest),(498,OpPush (Lit 0x4)),(500,OpPush (Lit 0x20)),(502,OpMstore),(503,OpPush (Lit 0x0)),(505,OpSwap 1),(506,OpDup 2),(507,OpMstore),(508,OpPush (Lit 0x40)),(510,OpSwap 1),(511,OpSha3),(512,OpSload),(513,OpDup 2),(514,OpJump),(515,OpJumpdest),(516,OpPush (Lit 0x11e)),(519,OpPush (Lit 0x40)),(521,OpMload),(522,OpDup 1),(523,OpPush (Lit 0x40)),(525,OpAdd),(526,OpPush (Lit 0x40)),(528,OpMstore),(529,OpDup 1),(530,OpPush (Lit 0x3)),(532,OpDup 2),(533,OpMstore),(534,OpPush (Lit 0x20)),(536,OpAdd),(537,OpPush (Lit 0x2a25a7)),(541,OpPush (Lit 0xe9)),(543,OpShl),(544,OpDup 2),(545,OpMstore),(546,OpPop),(547,OpDup 2),(548,OpJump),(549,OpJumpdest),(550,OpPush (Lit 0x1ae)),(553,OpPush (Lit 0x233)),(556,OpCalldatasize),(557,OpPush (Lit 0x4)),(559,OpPush (Lit 0x93e)),(562,OpJump),(563,OpJumpdest),(564,OpPush (Lit 0x44c)),(567,OpJump),(568,OpJumpdest),(569,OpPush (Lit 0x1ae)),(572,OpPush (Lit 0x246)),(575,OpCalldatasize),(576,OpPush (Lit 0x4)),(578,OpPush (Lit 0x8d8)),(581,OpJump),(582,OpJumpdest),(583,OpPush (Lit 0x495)),(586,OpJump),(587,OpJumpdest),(588,OpPush (Lit 0x147)),(591,OpPush (Lit 0x259)),(594,OpCalldatasize),(595,OpPush (Lit 0x4)),(597,OpPush (Lit 0x8d8)),(600,OpJump),(601,OpJumpdest),(602,OpPush (Lit 0x660)),(605,OpJump),(606,OpJumpdest),(607,OpPush (Lit 0x160)),(610,OpPush (Lit 0x26c)),(613,OpCalldatasize),(614,OpPush (Lit 0x4)),(616,OpPush (Lit 0x93e)),(619,OpJump),(620,OpJumpdest),(621,OpPush (Lit 0x0)),(623,OpPush (Lit 0x20)),(625,OpDup 2),(626,OpSwap 1),(627,OpMstore),(628,OpSwap 1),(629,OpDup 2),(630,OpMstore),(631,OpPush (Lit 0x40)),(633,OpSwap 1),(634,OpSha3),(635,OpSload),(636,OpDup 2),(637,OpJump),(638,OpJumpdest),(639,OpPush (Lit 0x160)),(642,OpPush (Lit 0x28c)),(645,OpCalldatasize),(646,OpPush (Lit 0x4)),(648,OpPush (Lit 0x959)),(651,OpJump),(652,OpJumpdest),(653,OpPush (Lit 0x3)),(655,OpPush (Lit 0x20)),(657,OpSwap 1),(658,OpDup 2),(659,OpMstore),(660,OpPush (Lit 0x0)),(662,OpSwap 3),(663,OpDup 4),(664,OpMstore),(665,OpPush (Lit 0x40)),(667,OpDup 1),(668,OpDup 5),(669,OpSha3),(670,OpSwap 1),(671,OpSwap 2),(672,OpMstore),(673,OpSwap 1),(674,OpDup 3),(675,OpMstore),(676,OpSwap 1),(677,OpSha3),(678,OpSload),(679,OpDup 2),(680,OpJump),(681,OpJumpdest),(682,OpCaller),(683,OpPush (Lit 0x0)),(685,OpDup 2),(686,OpDup 2),(687,OpMstore),(688,OpPush (Lit 0x3)),(690,OpPush (Lit 0x20)),(692,OpSwap 1),(693,OpDup 2),(694,OpMstore),(695,OpPush (Lit 0x40)),(697,OpDup 1),(698,OpDup 4),(699,OpSha3),(700,OpPush (Lit 0x1)),(702,OpPush (Lit 0x1)),(704,OpPush (Lit 0xa0)),(706,OpShl),(707,OpSub),(708,OpDup 8),(709,OpAnd),(710,OpDup 1),(711,OpDup 6),(712,OpMstore),(713,OpSwap 3),(714,OpMstore),(715,OpDup 1),(716,OpDup 4),(717,OpSha3),(718,OpDup 6),(719,OpSwap 1),(720,OpSstore),(721,OpMload),(722,OpSwap 2),(723,OpSwap 3),(724,OpSwap 1),(725,OpSwap 2),(726,OpPush (Lit 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925)),(759,OpSwap 1),(760,OpPush (Lit 0x304)),(763,OpSwap 1),(764,OpDup 7),(765,OpDup 2),(766,OpMstore),(767,OpPush (Lit 0x20)),(769,OpAdd),(770,OpSwap 1),(771,OpJump),(772,OpJumpdest),(773,OpPush (Lit 0x40)),(775,OpMload),(776,OpDup 1),(777,OpSwap 2),(778,OpSub),(779,OpSwap 1),(780,OpLog 3),(781,OpPop),(782,OpPush (Lit 0x1)),(784,OpJumpdest),(785,OpSwap 3),(786,OpSwap 2),(787,OpPop),(788,OpPop),(789,OpJump),(790,OpJumpdest),(791,OpPush (Lit 0x0)),(793,OpDup 1),(794,OpPush (Lit 0x324)),(797,OpDup 6),(798,OpDup 6),(799,OpDup 6),(800,OpPush (Lit 0x674)),(803,OpJump),(804,OpJumpdest),(805,OpSwap 1),(806,OpPop),(807,OpDup 1),(808,OpIszero),(809,OpPush (Lit 0x334)),(812,OpJumpi),(813,OpPush (Lit 0x334)),(816,OpPush (Lit 0x98c)),(819,OpJump),(820,OpJumpdest),(821,OpSwap 5),(822,OpSwap 4),(823,OpPop),(824,OpPop),(825,OpPop),(826,OpPop),(827,OpJump),(828,OpJumpdest),(829,OpCaller),(830,OpPush (Lit 0x0)),(832,OpSwap 1),(833,OpDup 2),(834,OpMstore),(835,OpPush (Lit 0x20)),(837,OpDup 2),(838,OpSwap 1),(839,OpMstore),(840,OpPush (Lit 0x40)),(842,OpSwap 1),(843,OpSha3),(844,OpSload),(845,OpPush (Lit 0x1)),(847,OpEq),(848,OpPush (Lit 0x374)),(851,OpJumpi),(852,OpPush (Lit 0x40)),(854,OpMload),(855,OpPush (Lit 0x461bcd)),(859,OpPush (Lit 0xe5)),(861,OpShl),(862,OpDup 2),(863,OpMstore),(864,OpPush (Lit 0x4)),(866,OpAdd),(867,OpPush (Lit 0x36b)),(870,OpSwap 1),(871,OpPush (Lit 0x9a2)),(874,OpJump),(875,OpJumpdest),(876,OpPush (Lit 0x40)),(878,OpMload),(879,OpDup 1),(880,OpSwap 2),(881,OpSub),(882,OpSwap 1),(883,OpRevert),(884,OpJumpdest),(885,OpPush (Lit 0x1)),(887,OpPush (Lit 0x1)),(889,OpPush (Lit 0xa0)),(891,OpShl),(892,OpSub),(893,OpDup 3),(894,OpAnd),(895,OpPush (Lit 0x0)),(897,OpSwap 1),(898,OpDup 2),(899,OpMstore),(900,OpPush (Lit 0x2)),(902,OpPush (Lit 0x20)),(904,OpMstore),(905,OpPush (Lit 0x40)),(907,OpDup 2),(908,OpSha3),(909,OpDup 1),(910,OpSload),(911,OpDup 4),(912,OpSwap 3),(913,OpSwap 1),(914,OpPush (Lit 0x39c)),(917,OpSwap 1),(918,OpDup 5),(919,OpSwap 1),(920,OpPush (Lit 0x9e0)),(923,OpJump),(924,OpJumpdest),(925,OpSwap 3),(926,OpPop),(927,OpPop),(928,OpDup 2),(929,OpSwap 1),(930,OpSstore),(931,OpPop),(932,OpDup 1),(933,OpPush (Lit 0x1)),(935,OpPush (Lit 0x0)),(937,OpDup 3),(938,OpDup 3),(939,OpSload),(940,OpPush (Lit 0x3b5)),(943,OpSwap 2),(944,OpSwap 1),(945,OpPush (Lit 0x9e0)),(948,OpJump),(949,OpJumpdest),(950,OpSwap 1),(951,OpSwap 2),(952,OpSstore),(953,OpPop),(954,OpPop),(955,OpPush (Lit 0x40)),(957,OpMload),(958,OpDup 2),(959,OpDup 2),(960,OpMstore),(961,OpPush (Lit 0x1)),(963,OpPush (Lit 0x1)),(965,OpPush (Lit 0xa0)),(967,OpShl),(968,OpSub),(969,OpDup 4),(970,OpAnd),(971,OpSwap 1),(972,OpPush (Lit 0x0)),(974,OpSwap 1),(975,OpPush (Lit 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)),(1008,OpSwap 1),(1009,OpPush (Lit 0x20)),(1011,OpAdd),(1012,OpJumpdest),(1013,OpPush (Lit 0x40)),(1015,OpMload),(1016,OpDup 1),(1017,OpSwap 2),(1018,OpSub),(1019,OpSwap 1),(1020,OpLog 3),(1021,OpPop),(1022,OpPop),(1023,OpJump),(1024,OpJumpdest),(1025,OpCaller),(1026,OpPush (Lit 0x0)),(1028,OpSwap 1),(1029,OpDup 2),(1030,OpMstore),(1031,OpPush (Lit 0x20)),(1033,OpDup 2),(1034,OpSwap 1),(1035,OpMstore),(1036,OpPush (Lit 0x40)),(1038,OpSwap 1),(1039,OpSha3),(1040,OpSload),(1041,OpPush (Lit 0x1)),(1043,OpEq),(1044,OpPush (Lit 0x42f)),(1047,OpJumpi),(1048,OpPush (Lit 0x40)),(1050,OpMload),(1051,OpPush (Lit 0x461bcd)),(1055,OpPush (Lit 0xe5)),(1057,OpShl),(1058,OpDup 2),(1059,OpMstore),(1060,OpPush (Lit 0x4)),(1062,OpAdd),(1063,OpPush (Lit 0x36b)),(1066,OpSwap 1),(1067,OpPush (Lit 0x9a2)),(1070,OpJump),(1071,OpJumpdest),(1072,OpPush (Lit 0x1)),(1074,OpPush (Lit 0x1)),(1076,OpPush (Lit 0xa0)),(1078,OpShl),(1079,OpSub),(1080,OpAnd),(1081,OpPush (Lit 0x0)),(1083,OpSwap 1),(1084,OpDup 2),(1085,OpMstore),(1086,OpPush (Lit 0x20)),(1088,OpDup 2),(1089,OpSwap 1),(1090,OpMstore),(1091,OpPush (Lit 0x40)),(1093,OpSwap 1),(1094,OpSha3),(1095,OpPush (Lit 0x1)),(1097,OpSwap 1),(1098,OpSstore),(1099,OpJump),(1100,OpJumpdest),(1101,OpCaller),(1102,OpPush (Lit 0x0)),(1104,OpSwap 1),(1105,OpDup 2),(1106,OpMstore),(1107,OpPush (Lit 0x20)),(1109,OpDup 2),(1110,OpSwap 1),(1111,OpMstore),(1112,OpPush (Lit 0x40)),(1114,OpSwap 1),(1115,OpSha3),(1116,OpSload),(1117,OpPush (Lit 0x1)),(1119,OpEq),(1120,OpPush (Lit 0x47b)),(1123,OpJumpi),(1124,OpPush (Lit 0x40)),(1126,OpMload),(1127,OpPush (Lit 0x461bcd)),(1131,OpPush (Lit 0xe5)),(1133,OpShl),(1134,OpDup 2),(1135,OpMstore),(1136,OpPush (Lit 0x4)),(1138,OpAdd),(1139,OpPush (Lit 0x36b)),(1142,OpSwap 1),(1143,OpPush (Lit 0x9a2)),(1146,OpJump),(1147,OpJumpdest),(1148,OpPush (Lit 0x1)),(1150,OpPush (Lit 0x1)),(1152,OpPush (Lit 0xa0)),(1154,OpShl),(1155,OpSub),(1156,OpAnd),(1157,OpPush (Lit 0x0)),(1159,OpSwap 1),(1160,OpDup 2),(1161,OpMstore),(1162,OpPush (Lit 0x20)),(1164,OpDup 2),(1165,OpSwap 1),(1166,OpMstore),(1167,OpPush (Lit 0x40)),(1169,OpDup 2),(1170,OpSha3),(1171,OpSstore),(1172,OpJump),(1173,OpJumpdest),(1174,OpPush (Lit 0x1)),(1176,OpPush (Lit 0x1)),(1178,OpPush (Lit 0xa0)),(1180,OpShl),(1181,OpSub),(1182,OpDup 3),(1183,OpAnd),(1184,OpPush (Lit 0x0)),(1186,OpSwap 1),(1187,OpDup 2),(1188,OpMstore),(1189,OpPush (Lit 0x2)),(1191,OpPush (Lit 0x20)),(1193,OpMstore),(1194,OpPush (Lit 0x40)),(1196,OpSwap 1),(1197,OpSha3),(1198,OpSload),(1199,OpDup 2),(1200,OpGt),(1201,OpIszero),(1202,OpPush (Lit 0x4f4)),(1205,OpJumpi),(1206,OpPush (Lit 0x40)),(1208,OpMload),(1209,OpPush (Lit 0x461bcd)),(1213,OpPush (Lit 0xe5)),(1215,OpShl),(1216,OpDup 2),(1217,OpMstore),(1218,OpPush (Lit 0x20)),(1220,OpPush (Lit 0x4)),(1222,OpDup 3),(1223,OpAdd),(1224,OpMstore),(1225,OpPush (Lit 0x14)),(1227,OpPush (Lit 0x24)),(1229,OpDup 3),(1230,OpAdd),(1231,OpMstore),(1232,OpPush (Lit 0x696e73756666696369656e742d62616c616e6365)),(1253,OpPush (Lit 0x60)),(1255,OpShl),(1256,OpPush (Lit 0x44)),(1258,OpDup 3),(1259,OpAdd),(1260,OpMstore),(1261,OpPush (Lit 0x64)),(1263,OpAdd),(1264,OpPush (Lit 0x36b)),(1267,OpJump),(1268,OpJumpdest),(1269,OpPush (Lit 0x1)),(1271,OpPush (Lit 0x1)),(1273,OpPush (Lit 0xa0)),(1275,OpShl),(1276,OpSub),(1277,OpDup 3),(1278,OpAnd),(1279,OpCaller),(1280,OpEq),(1281,OpDup 1),(1282,OpIszero),(1283,OpSwap 1),(1284,OpPush (Lit 0x532)),(1287,OpJumpi),(1288,OpPop),(1289,OpPush (Lit 0x1)),(1291,OpPush (Lit 0x1)),(1293,OpPush (Lit 0xa0)),(1295,OpShl),(1296,OpSub),(1297,OpDup 3),(1298,OpAnd),(1299,OpPush (Lit 0x0)),(1301,OpSwap 1),(1302,OpDup 2),(1303,OpMstore),(1304,OpPush (Lit 0x3)),(1306,OpPush (Lit 0x20)),(1308,OpSwap 1),(1309,OpDup 2),(1310,OpMstore),(1311,OpPush (Lit 0x40)),(1313,OpDup 1),(1314,OpDup 4),(1315,OpSha3),(1316,OpCaller),(1317,OpDup 5),(1318,OpMstore),(1319,OpSwap 1),(1320,OpSwap 2),(1321,OpMstore),(1322,OpSwap 1),(1323,OpSha3),(1324,OpSload),(1325,OpPush (Lit 0x0)),(1327,OpNot),(1328,OpEq),(1329,OpIszero),(1330,OpJumpdest),(1331,OpIszero),(1332,OpPush (Lit 0x5dc)),(1335,OpJumpi),(1336,OpPush (Lit 0x1)),(1338,OpPush (Lit 0x1)),(1340,OpPush (Lit 0xa0)),(1342,OpShl),(1343,OpSub),(1344,OpDup 3),(1345,OpAnd),(1346,OpPush (Lit 0x0)),(1348,OpSwap 1),(1349,OpDup 2),(1350,OpMstore),(1351,OpPush (Lit 0x3)),(1353,OpPush (Lit 0x20)),(1355,OpSwap 1),(1356,OpDup 2),(1357,OpMstore),(1358,OpPush (Lit 0x40)),(1360,OpDup 1),(1361,OpDup 4),(1362,OpSha3),(1363,OpCaller),(1364,OpDup 5),(1365,OpMstore),(1366,OpSwap 1),(1367,OpSwap 2),(1368,OpMstore),(1369,OpSwap 1),(1370,OpSha3),(1371,OpSload),(1372,OpDup 2),(1373,OpGt),(1374,OpIszero),(1375,OpPush (Lit 0x5a3)),(1378,OpJumpi),(1379,OpPush (Lit 0x40)),(1381,OpMload),(1382,OpPush (Lit 0x461bcd)),(1386,OpPush (Lit 0xe5)),(1388,OpShl),(1389,OpDup 2),(1390,OpMstore),(1391,OpPush (Lit 0x20)),(1393,OpPush (Lit 0x4)),(1395,OpDup 3),(1396,OpAdd),(1397,OpMstore),(1398,OpPush (Lit 0x16)),(1400,OpPush (Lit 0x24)),(1402,OpDup 3),(1403,OpAdd),(1404,OpMstore),(1405,OpPush (Lit 0x696e73756666696369656e742d616c6c6f77616e6365)),(1428,OpPush (Lit 0x50)),(1430,OpShl),(1431,OpPush (Lit 0x44)),(1433,OpDup 3),(1434,OpAdd),(1435,OpMstore),(1436,OpPush (Lit 0x64)),(1438,OpAdd),(1439,OpPush (Lit 0x36b)),(1442,OpJump),(1443,OpJumpdest),(1444,OpPush (Lit 0x1)),(1446,OpPush (Lit 0x1)),(1448,OpPush (Lit 0xa0)),(1450,OpShl),(1451,OpSub),(1452,OpDup 3),(1453,OpAnd),(1454,OpPush (Lit 0x0)),(1456,OpSwap 1),(1457,OpDup 2),(1458,OpMstore),(1459,OpPush (Lit 0x3)),(1461,OpPush (Lit 0x20)),(1463,OpSwap 1),(1464,OpDup 2),(1465,OpMstore),(1466,OpPush (Lit 0x40)),(1468,OpDup 1),(1469,OpDup 4),(1470,OpSha3),(1471,OpCaller),(1472,OpDup 5),(1473,OpMstore),(1474,OpSwap 1),(1475,OpSwap 2),(1476,OpMstore),(1477,OpDup 2),(1478,OpSha3),(1479,OpDup 1),(1480,OpSload),(1481,OpDup 4),(1482,OpSwap 3),(1483,OpSwap 1),(1484,OpPush (Lit 0x5d6)),(1487,OpSwap 1),(1488,OpDup 5),(1489,OpSwap 1),(1490,OpPush (Lit 0x9f3)),(1493,OpJump),(1494,OpJumpdest),(1495,OpSwap 1),(1496,OpSwap 2),(1497,OpSstore),(1498,OpPop),(1499,OpPop),(1500,OpJumpdest),(1501,OpPush (Lit 0x1)),(1503,OpPush (Lit 0x1)),(1505,OpPush (Lit 0xa0)),(1507,OpShl),(1508,OpSub),(1509,OpDup 3),(1510,OpAnd),(1511,OpPush (Lit 0x0)),(1513,OpSwap 1),(1514,OpDup 2),(1515,OpMstore),(1516,OpPush (Lit 0x2)),(1518,OpPush (Lit 0x20)),(1520,OpMstore),(1521,OpPush (Lit 0x40)),(1523,OpDup 2),(1524,OpSha3),(1525,OpDup 1),(1526,OpSload),(1527,OpDup 4),(1528,OpSwap 3),(1529,OpSwap 1),(1530,OpPush (Lit 0x604)),(1533,OpSwap 1),(1534,OpDup 5),(1535,OpSwap 1),(1536,OpPush (Lit 0x9f3)),(1539,OpJump),(1540,OpJumpdest),(1541,OpSwap 3),(1542,OpPop),(1543,OpPop),(1544,OpDup 2),(1545,OpSwap 1),(1546,OpSstore),(1547,OpPop),(1548,OpDup 1),(1549,OpPush (Lit 0x1)),(1551,OpPush (Lit 0x0)),(1553,OpDup 3),(1554,OpDup 3),(1555,OpSload),(1556,OpPush (Lit 0x61d)),(1559,OpSwap 2),(1560,OpSwap 1),(1561,OpPush (Lit 0x9f3)),(1564,OpJump),(1565,OpJumpdest),(1566,OpSwap 1),(1567,OpSwap 2),(1568,OpSstore),(1569,OpPop),(1570,OpPop),(1571,OpPush (Lit 0x40)),(1573,OpMload),(1574,OpDup 2),(1575,OpDup 2),(1576,OpMstore),(1577,OpPush (Lit 0x0)),(1579,OpSwap 1),(1580,OpPush (Lit 0x1)),(1582,OpPush (Lit 0x1)),(1584,OpPush (Lit 0xa0)),(1586,OpShl),(1587,OpSub),(1588,OpDup 5),(1589,OpAnd),(1590,OpSwap 1),(1591,OpPush (Lit 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)),(1624,OpSwap 1),(1625,OpPush (Lit 0x20)),(1627,OpAdd),(1628,OpPush (Lit 0x3f4)),(1631,OpJump),(1632,OpJumpdest),(1633,OpPush (Lit 0x0)),(1635,OpPush (Lit 0x66d)),(1638,OpCaller),(1639,OpDup 5),(1640,OpDup 5),(1641,OpPush (Lit 0x316)),(1644,OpJump),(1645,OpJumpdest),(1646,OpSwap 4),(1647,OpSwap 3),(1648,OpPop),(1649,OpPop),(1650,OpPop),(1651,OpJump),(1652,OpJumpdest),(1653,OpPush (Lit 0x1)),(1655,OpPush (Lit 0x1)),(1657,OpPush (Lit 0xa0)),(1659,OpShl),(1660,OpSub),(1661,OpDup 4),(1662,OpAnd),(1663,OpPush (Lit 0x0)),(1665,OpSwap 1),(1666,OpDup 2),(1667,OpMstore),(1668,OpPush (Lit 0x2)),(1670,OpPush (Lit 0x20)),(1672,OpMstore),(1673,OpPush (Lit 0x40)),(1675,OpDup 2),(1676,OpSha3),(1677,OpSload),(1678,OpDup 3),(1679,OpGt),(1680,OpIszero),(1681,OpPush (Lit 0x6d3)),(1684,OpJumpi),(1685,OpPush (Lit 0x40)),(1687,OpMload),(1688,OpPush (Lit 0x461bcd)),(1692,OpPush (Lit 0xe5)),(1694,OpShl),(1695,OpDup 2),(1696,OpMstore),(1697,OpPush (Lit 0x20)),(1699,OpPush (Lit 0x4)),(1701,OpDup 3),(1702,OpAdd),(1703,OpMstore),(1704,OpPush (Lit 0x14)),(1706,OpPush (Lit 0x24)),(1708,OpDup 3),(1709,OpAdd),(1710,OpMstore),(1711,OpPush (Lit 0x696e73756666696369656e742d62616c616e6365)),(1732,OpPush (Lit 0x60)),(1734,OpShl),(1735,OpPush (Lit 0x44)),(1737,OpDup 3),(1738,OpAdd),(1739,OpMstore),(1740,OpPush (Lit 0x64)),(1742,OpAdd),(1743,OpPush (Lit 0x36b)),(1746,OpJump),(1747,OpJumpdest),(1748,OpPush (Lit 0x1)),(1750,OpPush (Lit 0x1)),(1752,OpPush (Lit 0xa0)),(1754,OpShl),(1755,OpSub),(1756,OpDup 5),(1757,OpAnd),(1758,OpCaller),(1759,OpEq),(1760,OpDup 1),(1761,OpIszero),(1762,OpSwap 1),(1763,OpPush (Lit 0x711)),(1766,OpJumpi),(1767,OpPop),(1768,OpPush (Lit 0x1)),(1770,OpPush (Lit 0x1)),(1772,OpPush (Lit 0xa0)),(1774,OpShl),(1775,OpSub),(1776,OpDup 5),(1777,OpAnd),(1778,OpPush (Lit 0x0)),(1780,OpSwap 1),(1781,OpDup 2),(1782,OpMstore),(1783,OpPush (Lit 0x3)),(1785,OpPush (Lit 0x20)),(1787,OpSwap 1),(1788,OpDup 2),(1789,OpMstore),(1790,OpPush (Lit 0x40)),(1792,OpDup 1),(1793,OpDup 4),(1794,OpSha3),(1795,OpCaller),(1796,OpDup 5),(1797,OpMstore),(1798,OpSwap 1),(1799,OpSwap 2),(1800,OpMstore),(1801,OpSwap 1),(1802,OpSha3),(1803,OpSload),(1804,OpPush (Lit 0x0)),(1806,OpNot),(1807,OpEq),(1808,OpIszero),(1809,OpJumpdest),(1810,OpIszero),(1811,OpPush (Lit 0x7bb)),(1814,OpJumpi),(1815,OpPush (Lit 0x1)),(1817,OpPush (Lit 0x1)),(1819,OpPush (Lit 0xa0)),(1821,OpShl),(1822,OpSub),(1823,OpDup 5),(1824,OpAnd),(1825,OpPush (Lit 0x0)),(1827,OpSwap 1),(1828,OpDup 2),(1829,OpMstore),(1830,OpPush (Lit 0x3)),(1832,OpPush (Lit 0x20)),(1834,OpSwap 1),(1835,OpDup 2),(1836,OpMstore),(1837,OpPush (Lit 0x40)),(1839,OpDup 1),(1840,OpDup 4),(1841,OpSha3),(1842,OpCaller),(1843,OpDup 5),(1844,OpMstore),(1845,OpSwap 1),(1846,OpSwap 2),(1847,OpMstore),(1848,OpSwap 1),(1849,OpSha3),(1850,OpSload),(1851,OpDup 3),(1852,OpGt),(1853,OpIszero),(1854,OpPush (Lit 0x782)),(1857,OpJumpi),(1858,OpPush (Lit 0x40)),(1860,OpMload),(1861,OpPush (Lit 0x461bcd)),(1865,OpPush (Lit 0xe5)),(1867,OpShl),(1868,OpDup 2),(1869,OpMstore),(1870,OpPush (Lit 0x20)),(1872,OpPush (Lit 0x4)),(1874,OpDup 3),(1875,OpAdd),(1876,OpMstore),(1877,OpPush (Lit 0x16)),(1879,OpPush (Lit 0x24)),(1881,OpDup 3),(1882,OpAdd),(1883,OpMstore),(1884,OpPush (Lit 0x696e73756666696369656e742d616c6c6f77616e6365)),(1907,OpPush (Lit 0x50)),(1909,OpShl),(1910,OpPush (Lit 0x44)),(1912,OpDup 3),(1913,OpAdd),(1914,OpMstore),(1915,OpPush (Lit 0x64)),(1917,OpAdd),(1918,OpPush (Lit 0x36b)),(1921,OpJump),(1922,OpJumpdest),(1923,OpPush (Lit 0x1)),(1925,OpPush (Lit 0x1)),(1927,OpPush (Lit 0xa0)),(1929,OpShl),(1930,OpSub),(1931,OpDup 5),(1932,OpAnd),(1933,OpPush (Lit 0x0)),(1935,OpSwap 1),(1936,OpDup 2),(1937,OpMstore),(1938,OpPush (Lit 0x3)),(1940,OpPush (Lit 0x20)),(1942,OpSwap 1),(1943,OpDup 2),(1944,OpMstore),(1945,OpPush (Lit 0x40)),(1947,OpDup 1),(1948,OpDup 4),(1949,OpSha3),(1950,OpCaller),(1951,OpDup 5),(1952,OpMstore),(1953,OpSwap 1),(1954,OpSwap 2),(1955,OpMstore),(1956,OpDup 2),(1957,OpSha3),(1958,OpDup 1),(1959,OpSload),(1960,OpDup 5),(1961,OpSwap 3),(1962,OpSwap 1),(1963,OpPush (Lit 0x7b5)),(1966,OpSwap 1),(1967,OpDup 5),(1968,OpSwap 1),(1969,OpPush (Lit 0x9f3)),(1972,OpJump),(1973,OpJumpdest),(1974,OpSwap 1),(1975,OpSwap 2),(1976,OpSstore),(1977,OpPop),(1978,OpPop),(1979,OpJumpdest),(1980,OpPush (Lit 0x1)),(1982,OpPush (Lit 0x1)),(1984,OpPush (Lit 0xa0)),(1986,OpShl),(1987,OpSub),(1988,OpDup 5),(1989,OpAnd),(1990,OpPush (Lit 0x0)),(1992,OpSwap 1),(1993,OpDup 2),(1994,OpMstore),(1995,OpPush (Lit 0x2)),(1997,OpPush (Lit 0x20)),(1999,OpMstore),(2000,OpPush (Lit 0x40)),(2002,OpDup 2),(2003,OpSha3),(2004,OpDup 1),(2005,OpSload),(2006,OpDup 5),(2007,OpSwap 3),(2008,OpSwap 1),(2009,OpPush (Lit 0x7e3)),(2012,OpSwap 1),(2013,OpDup 5),(2014,OpSwap 1),(2015,OpPush (Lit 0x9f3)),(2018,OpJump),(2019,OpJumpdest),(2020,OpSwap 1),(2021,OpSwap 2),(2022,OpSstore),(2023,OpPop),(2024,OpPop),(2025,OpPush (Lit 0x1)),(2027,OpPush (Lit 0x1)),(2029,OpPush (Lit 0xa0)),(2031,OpShl),(2032,OpSub),(2033,OpDup 4),(2034,OpAnd),(2035,OpPush (Lit 0x0)),(2037,OpSwap 1),(2038,OpDup 2),(2039,OpMstore),(2040,OpPush (Lit 0x2)),(2042,OpPush (Lit 0x20)),(2044,OpMstore),(2045,OpPush (Lit 0x40)),(2047,OpDup 2),(2048,OpSha3),(2049,OpDup 1),(2050,OpSload),(2051,OpDup 5),(2052,OpSwap 3),(2053,OpSwap 1),(2054,OpPush (Lit 0x810)),(2057,OpSwap 1),(2058,OpDup 5),(2059,OpSwap 1),(2060,OpPush (Lit 0x9e0)),(2063,OpJump),(2064,OpJumpdest),(2065,OpSwap 3),(2066,OpPop),(2067,OpPop),(2068,OpDup 2),(2069,OpSwap 1),(2070,OpSstore),(2071,OpPop),(2072,OpDup 3),(2073,OpPush (Lit 0x1)),(2075,OpPush (Lit 0x1)),(2077,OpPush (Lit 0xa0)),(2079,OpShl),(2080,OpSub),(2081,OpAnd),(2082,OpDup 5),(2083,OpPush (Lit 0x1)),(2085,OpPush (Lit 0x1)),(2087,OpPush (Lit 0xa0)),(2089,OpShl),(2090,OpSub),(2091,OpAnd),(2092,OpPush (Lit 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)),(2125,OpDup 5),(2126,OpPush (Lit 0x40)),(2128,OpMload),(2129,OpPush (Lit 0x85c)),(2132,OpSwap 2),(2133,OpDup 2),(2134,OpMstore),(2135,OpPush (Lit 0x20)),(2137,OpAdd),(2138,OpSwap 1),(2139,OpJump),(2140,OpJumpdest),(2141,OpPush (Lit 0x40)),(2143,OpMload),(2144,OpDup 1),(2145,OpSwap 2),(2146,OpSub),(2147,OpSwap 1),(2148,OpLog 3),(2149,OpPop),(2150,OpPush (Lit 0x1)),(2152,OpSwap 4),(2153,OpSwap 3),(2154,OpPop),(2155,OpPop),(2156,OpPop),(2157,OpJump),(2158,OpJumpdest),(2159,OpPush (Lit 0x0)),(2161,OpPush (Lit 0x20)),(2163,OpDup 1),(2164,OpDup 4),(2165,OpMstore),(2166,OpDup 4),(2167,OpMload),(2168,OpDup 1),(2169,OpDup 3),(2170,OpDup 6),(2171,OpAdd),(2172,OpMstore),(2173,OpPush (Lit 0x0)),(2175,OpJumpdest),(2176,OpDup 2),(2177,OpDup 2),(2178,OpLt),(2179,OpIszero),(2180,OpPush (Lit 0x89b)),(2183,OpJumpi),(2184,OpDup 6),(2185,OpDup 2),(2186,OpAdd),(2187,OpDup 4),(2188,OpAdd),(2189,OpMload),(2190,OpDup 6),(2191,OpDup 3),(2192,OpAdd),(2193,OpPush (Lit 0x40)),(2195,OpAdd),(2196,OpMstore),(2197,OpDup 3),(2198,OpAdd),(2199,OpPush (Lit 0x87f)),(2202,OpJump),(2203,OpJumpdest),(2204,OpPop),(2205,OpPush (Lit 0x0)),(2207,OpPush (Lit 0x40)),(2209,OpDup 3),(2210,OpDup 7),(2211,OpAdd),(2212,OpAdd),(2213,OpMstore),(2214,OpPush (Lit 0x40)),(2216,OpPush (Lit 0x1f)),(2218,OpNot),(2219,OpPush (Lit 0x1f)),(2221,OpDup 4),(2222,OpAdd),(2223,OpAnd),(2224,OpDup 6),(2225,OpAdd),(2226,OpAdd),(2227,OpSwap 3),(2228,OpPop),(2229,OpPop),(2230,OpPop),(2231,OpSwap 3),(2232,OpSwap 2),(2233,OpPop),(2234,OpPop),(2235,OpJump),(2236,OpJumpdest),(2237,OpDup 1),(2238,OpCalldataload),(2239,OpPush (Lit 0x1)),(2241,OpPush (Lit 0x1)),(2243,OpPush (Lit 0xa0)),(2245,OpShl),(2246,OpSub),(2247,OpDup 2),(2248,OpAnd),(2249,OpDup 2),(2250,OpEq),(2251,OpPush (Lit 0x8d3)),(2254,OpJumpi),(2255,OpPush (Lit 0x0)),(2257,OpDup 1),(2258,OpRevert),(2259,OpJumpdest),(2260,OpSwap 2),(2261,OpSwap 1),(2262,OpPop),(2263,OpJump),(2264,OpJumpdest),(2265,OpPush (Lit 0x0)),(2267,OpDup 1),(2268,OpPush (Lit 0x40)),(2270,OpDup 4),(2271,OpDup 6),(2272,OpSub),(2273,OpSlt),(2274,OpIszero),(2275,OpPush (Lit 0x8eb)),(2278,OpJumpi),(2279,OpPush (Lit 0x0)),(2281,OpDup 1),(2282,OpRevert),(2283,OpJumpdest),(2284,OpPush (Lit 0x8f4)),(2287,OpDup 4),(2288,OpPush (Lit 0x8bc)),(2291,OpJump),(2292,OpJumpdest),(2293,OpSwap 5),(2294,OpPush (Lit 0x20)),(2296,OpSwap 4),(2297,OpSwap 1),(2298,OpSwap 4),(2299,OpAdd),(2300,OpCalldataload),(2301,OpSwap 4),(2302,OpPop),(2303,OpPop),(2304,OpPop),(2305,OpJump),(2306,OpJumpdest),(2307,OpPush (Lit 0x0)),(2309,OpDup 1),(2310,OpPush (Lit 0x0)),(2312,OpPush (Lit 0x60)),(2314,OpDup 5),(2315,OpDup 7),(2316,OpSub),(2317,OpSlt),(2318,OpIszero),(2319,OpPush (Lit 0x917)),(2322,OpJumpi),(2323,OpPush (Lit 0x0)),(2325,OpDup 1),(2326,OpRevert),(2327,OpJumpdest),(2328,OpPush (Lit 0x920)),(2331,OpDup 5),(2332,OpPush (Lit 0x8bc)),(2335,OpJump),(2336,OpJumpdest),(2337,OpSwap 3),(2338,OpPop),(2339,OpPush (Lit 0x92e)),(2342,OpPush (Lit 0x20)),(2344,OpDup 6),(2345,OpAdd),(2346,OpPush (Lit 0x8bc)),(2349,OpJump),(2350,OpJumpdest),(2351,OpSwap 2),(2352,OpPop),(2353,OpPush (Lit 0x40)),(2355,OpDup 5),(2356,OpAdd),(2357,OpCalldataload),(2358,OpSwap 1),(2359,OpPop),(2360,OpSwap 3),(2361,OpPop),(2362,OpSwap 3),(2363,OpPop),(2364,OpSwap 3),(2365,OpJump),(2366,OpJumpdest),(2367,OpPush (Lit 0x0)),(2369,OpPush (Lit 0x20)),(2371,OpDup 3),(2372,OpDup 5),(2373,OpSub),(2374,OpSlt),(2375,OpIszero),(2376,OpPush (Lit 0x950)),(2379,OpJumpi),(2380,OpPush (Lit 0x0)),(2382,OpDup 1),(2383,OpRevert),(2384,OpJumpdest),(2385,OpPush (Lit 0x66d)),(2388,OpDup 3),(2389,OpPush (Lit 0x8bc)),(2392,OpJump),(2393,OpJumpdest),(2394,OpPush (Lit 0x0)),(2396,OpDup 1),(2397,OpPush (Lit 0x40)),(2399,OpDup 4),(2400,OpDup 6),(2401,OpSub),(2402,OpSlt),(2403,OpIszero),(2404,OpPush (Lit 0x96c)),(2407,OpJumpi),(2408,OpPush (Lit 0x0)),(2410,OpDup 1),(2411,OpRevert),(2412,OpJumpdest),(2413,OpPush (Lit 0x975)),(2416,OpDup 4),(2417,OpPush (Lit 0x8bc)),(2420,OpJump),(2421,OpJumpdest),(2422,OpSwap 2),(2423,OpPop),(2424,OpPush (Lit 0x983)),(2427,OpPush (Lit 0x20)),(2429,OpDup 5),(2430,OpAdd),(2431,OpPush (Lit 0x8bc)),(2434,OpJump),(2435,OpJumpdest),(2436,OpSwap 1),(2437,OpPop),(2438,OpSwap 3),(2439,OpPop),(2440,OpSwap 3),(2441,OpSwap 1),(2442,OpPop),(2443,OpJump),(2444,OpJumpdest),(2445,OpPush (Lit 0x4e487b71)),(2450,OpPush (Lit 0xe0)),(2452,OpShl),(2453,OpPush (Lit 0x0)),(2455,OpMstore),(2456,OpPush (Lit 0x1)),(2458,OpPush (Lit 0x4)),(2460,OpMstore),(2461,OpPush (Lit 0x24)),(2463,OpPush (Lit 0x0)),(2465,OpRevert),(2466,OpJumpdest),(2467,OpPush (Lit 0x20)),(2469,OpDup 1),(2470,OpDup 3),(2471,OpMstore),(2472,OpPush (Lit 0xe)),(2474,OpSwap 1),(2475,OpDup 3),(2476,OpAdd),(2477,OpMstore),(2478,OpPush (Lit 0x1b9bdd0b585d5d1a1bdc9a5e9959)),(2493,OpPush (Lit 0x92)),(2495,OpShl),(2496,OpPush (Lit 0x40)),(2498,OpDup 3),(2499,OpAdd),(2500,OpMstore),(2501,OpPush (Lit 0x60)),(2503,OpAdd),(2504,OpSwap 1),(2505,OpJump),(2506,OpJumpdest),(2507,OpPush (Lit 0x4e487b71)),(2512,OpPush (Lit 0xe0)),(2514,OpShl),(2515,OpPush (Lit 0x0)),(2517,OpMstore),(2518,OpPush (Lit 0x11)),(2520,OpPush (Lit 0x4)),(2522,OpMstore),(2523,OpPush (Lit 0x24)),(2525,OpPush (Lit 0x0)),(2527,OpRevert),(2528,OpJumpdest),(2529,OpDup 1),(2530,OpDup 3),(2531,OpAdd),(2532,OpDup 1),(2533,OpDup 3),(2534,OpGt),(2535,OpIszero),(2536,OpPush (Lit 0x310)),(2539,OpJumpi),(2540,OpPush (Lit 0x310)),(2543,OpPush (Lit 0x9ca)),(2546,OpJump),(2547,OpJumpdest),(2548,OpDup 2),(2549,OpDup 2),(2550,OpSub),(2551,OpDup 2),(2552,OpDup 2),(2553,OpGt),(2554,OpIszero),(2555,OpPush (Lit 0x310)),(2558,OpJumpi),(2559,OpPush (Lit 0x310)),(2562,OpPush (Lit 0x9ca)),(2565,OpJump),(2566,OpUnknown 254)], external = False}, tracedata = EventTrace (Lit 0xacab) (WriteWord (Lit 0x0) (ReadWord (Lit 0x24) (AbstractBuf "txdata")) (ConcreteBuf "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL")) [Lit 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef,And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (Caller 0),And (Lit 0xffffffffffffffffffffffffffffffffffffffff) (ReadWord (Lit 0x4) (AbstractBuf "txdata"))]}, subForest = []}], contracts = fromList [(0x0,COnTract {CONTracTcODE = RUNtiMECODE (ConcreteRuntimeCode ""), balance = 0x0, nonce = 0x1, codehash = Lit 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, opIxMap = [], codeOps = [], external = False}),(0xAcab,ContRAct {CoNTrACtCode = RUNtIMECODe (ConcreteRuntimeCode "`\128`@R4\128\NAKa\NUL\DLEW`\NUL\128\253[P`\EOT6\DLEa\NUL\245W`\NUL5`\224\FS\128cp\160\130\&1\DC1a\NUL\151W\128c\157\194\159\172\DC1a\NULfW\128c\157\194\159\172\DC4a\STX8W\128c\169\ENQ\156\187\DC4a\STXKW\128c\191\&5=\187\DC4a\STX^W\128c\221b\237>\DC4a\STX~W`\NUL\128\253[\128cp\160\130\&1\DC4a\SOH\195W\128c~\206\190\NUL\DC4a\SOH\227W\128c\149\216\155A\DC4a\STX\ETXW\128c\156R\167\241\DC4a\STX%W`\NUL\128\253[\128c#\184r\221\DC1a\NUL\211W\128c#\184r\221\DC4a\SOHnW\128c1<\229g\DC4a\SOH\129W\128c@\193\SI\EM\DC4a\SOH\155W\128ce\250\227^\DC4a\SOH\176W`\NUL\128\253[\128c\ACK\253\222\ETX\DC4a\NUL\250W\128c\t^\167\179\DC4a\SOH4W\128c\CAN\SYN\r\221\DC4a\SOHWW[`\NUL\128\253[a\SOH\RS`@Q\128`@\SOH`@R\128`\ENQ\129R` \SOHd*7\181\178\183`\217\ESC\129RP\129V[`@Qa\SOH+\145\144a\bnV[`@Q\128\145\ETX\144\243[a\SOHGa\SOHB6`\EOTa\b\216V[a\STX\169V[`@Q\144\NAK\NAK\129R` \SOHa\SOH+V[a\SOH``\SOHT\129V[`@Q\144\129R` \SOHa\SOH+V[a\SOHGa\SOH|6`\EOTa\t\STXV[a\ETX\SYNV[a\SOH\137`\DC2\129V[`@Q`\255\144\145\SYN\129R` \SOHa\SOH+V[a\SOH\174a\SOH\169\&6`\EOTa\b\216V[a\ETX<V[\NUL[a\SOH\174a\SOH\190\&6`\EOTa\t>V[a\EOT\NULV[a\SOH`a\SOH\209\&6`\EOTa\t>V[`\STX` R`\NUL\144\129R`@\144 T\129V[a\SOH`a\SOH\241\&6`\EOTa\t>V[`\EOT` R`\NUL\144\129R`@\144 T\129V[a\SOH\RS`@Q\128`@\SOH`@R\128`\ETX\129R` \SOHb*%\167`\233\ESC\129RP\129V[a\SOH\174a\STX36`\EOTa\t>V[a\EOTLV[a\SOH\174a\STXF6`\EOTa\b\216V[a\EOT\149V[a\SOHGa\STXY6`\EOTa\b\216V[a\ACK`V[a\SOH`a\STXl6`\EOTa\t>V[`\NUL` \129\144R\144\129R`@\144 T\129V[a\SOH`a\STX\140\&6`\EOTa\tYV[`\ETX` \144\129R`\NUL\146\131R`@\128\132 \144\145R\144\130R\144 T\129V[3`\NUL\129\129R`\ETX` \144\129R`@\128\131 `\SOH`\SOH`\160\ESC\ETX\135\SYN\128\133R\146R\128\131 \133\144UQ\145\146\144\145\DEL\140[\225\229\235\236}[\209OqB}\RS\132\243\221\ETX\DC4\192\247\178)\RS[ \n\200\199\195\185%\144a\ETX\EOT\144\134\129R` \SOH\144V[`@Q\128\145\ETX\144\163P`\SOH[\146\145PPV[`\NUL\128a\ETX$\133\133\133a\ACKtV[\144P\128\NAKa\ETX4Wa\ETX4a\t\140V[\148\147PPPPV[3`\NUL\144\129R` \129\144R`@\144 T`\SOH\DC4a\ETXtW`@QbF\ESC\205`\229\ESC\129R`\EOT\SOHa\ETXk\144a\t\162V[`@Q\128\145\ETX\144\253[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\STX` R`@\129 \128T\131\146\144a\ETX\156\144\132\144a\t\224V[\146PP\129\144UP\128`\SOH`\NUL\130\130Ta\ETX\181\145\144a\t\224V[\144\145UPP`@Q\129\129R`\SOH`\SOH`\160\ESC\ETX\131\SYN\144`\NUL\144\DEL\221\242R\173\ESC\226\200\155i\194\176h\252\&7\141\170\149+\167\241c\196\161\SYN(\245ZM\245#\179\239\144` \SOH[`@Q\128\145\ETX\144\163PPV[3`\NUL\144\129R` \129\144R`@\144 T`\SOH\DC4a\EOT/W`@QbF\ESC\205`\229\ESC\129R`\EOT\SOHa\ETXk\144a\t\162V[`\SOH`\SOH`\160\ESC\ETX\SYN`\NUL\144\129R` \129\144R`@\144 `\SOH\144UV[3`\NUL\144\129R` \129\144R`@\144 T`\SOH\DC4a\EOT{W`@QbF\ESC\205`\229\ESC\129R`\EOT\SOHa\ETXk\144a\t\162V[`\SOH`\SOH`\160\ESC\ETX\SYN`\NUL\144\129R` \129\144R`@\129 UV[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\STX` R`@\144 T\129\DC1\NAKa\EOT\244W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\DC4`$\130\SOHRsinsufficient-balance``\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\130\SYN3\DC4\128\NAK\144a\ENQ2WP`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T`\NUL\EM\DC4\NAK[\NAKa\ENQ\220W`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T\129\DC1\NAKa\ENQ\163W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\SYN`$\130\SOHRuinsufficient-allowance`P\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\129 \128T\131\146\144a\ENQ\214\144\132\144a\t\243V[\144\145UPP[`\SOH`\SOH`\160\ESC\ETX\130\SYN`\NUL\144\129R`\STX` R`@\129 \128T\131\146\144a\ACK\EOT\144\132\144a\t\243V[\146PP\129\144UP\128`\SOH`\NUL\130\130Ta\ACK\GS\145\144a\t\243V[\144\145UPP`@Q\129\129R`\NUL\144`\SOH`\SOH`\160\ESC\ETX\132\SYN\144\DEL\221\242R\173\ESC\226\200\155i\194\176h\252\&7\141\170\149+\167\241c\196\161\SYN(\245ZM\245#\179\239\144` \SOHa\ETX\244V[`\NULa\ACKm3\132\132a\ETX\SYNV[\147\146PPPV[`\SOH`\SOH`\160\ESC\ETX\131\SYN`\NUL\144\129R`\STX` R`@\129 T\130\DC1\NAKa\ACK\211W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\DC4`$\130\SOHRsinsufficient-balance``\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\132\SYN3\DC4\128\NAK\144a\a\DC1WP`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T`\NUL\EM\DC4\NAK[\NAKa\a\187W`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\144 T\130\DC1\NAKa\a\130W`@QbF\ESC\205`\229\ESC\129R` `\EOT\130\SOHR`\SYN`$\130\SOHRuinsufficient-allowance`P\ESC`D\130\SOHR`d\SOHa\ETXkV[`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\ETX` \144\129R`@\128\131 3\132R\144\145R\129 \128T\132\146\144a\a\181\144\132\144a\t\243V[\144\145UPP[`\SOH`\SOH`\160\ESC\ETX\132\SYN`\NUL\144\129R`\STX` R`@\129 \128T\132\146\144a\a\227\144\132\144a\t\243V[\144\145UPP`\SOH`\SOH`\160\ESC\ETX\131\SYN`\NUL\144\129R`\STX` R`@\129 \128T\132\146\144a\b\DLE\144\132\144a\t\224V[\146PP\129\144UP\130`\SOH`\SOH`\160\ESC\ETX\SYN\132`\SOH`\SOH`\160\ESC\ETX\SYN\DEL\221\242R\173\ESC\226\200\155i\194\176h\252\&7\141\170\149+\167\241c\196\161\SYN(\245ZM\245#\179\239\132`@Qa\b\\\145\129R` \SOH\144V[`@Q\128\145\ETX\144\163P`\SOH\147\146PPPV[`\NUL` \128\131R\131Q\128\130\133\SOHR`\NUL[\129\129\DLE\NAKa\b\155W\133\129\SOH\131\SOHQ\133\130\SOH`@\SOHR\130\SOHa\b\DELV[P`\NUL`@\130\134\SOH\SOHR`@`\US\EM`\US\131\SOH\SYN\133\SOH\SOH\146PPP\146\145PPV[\128\&5`\SOH`\SOH`\160\ESC\ETX\129\SYN\129\DC4a\b\211W`\NUL\128\253[\145\144PV[`\NUL\128`@\131\133\ETX\DC2\NAKa\b\235W`\NUL\128\253[a\b\244\131a\b\188V[\148` \147\144\147\SOH5\147PPPV[`\NUL\128`\NUL``\132\134\ETX\DC2\NAKa\t\ETBW`\NUL\128\253[a\t \132a\b\188V[\146Pa\t.` \133\SOHa\b\188V[\145P`@\132\SOH5\144P\146P\146P\146V[`\NUL` \130\132\ETX\DC2\NAKa\tPW`\NUL\128\253[a\ACKm\130a\b\188V[`\NUL\128`@\131\133\ETX\DC2\NAKa\tlW`\NUL\128\253[a\tu\131a\b\188V[\145Pa\t\131` \132\SOHa\b\188V[\144P\146P\146\144PV[cNH{q`\224\ESC`\NULR`\SOH`\EOTR`$`\NUL\253[` \128\130R`\SO\144\130\SOHRm\ESC\155\221\vX]]\SUB\ESC\220\154^\153Y`\146\ESC`@\130\SOHR``\SOH\144V[cNH{q`\224\ESC`\NULR`\DC1`\EOTR`$`\NUL\253[\128\130\SOH\128\130\DC1\NAKa\ETX\DLEWa\ETX\DLEa\t\202V[\129\129\ETX\129\129\DC1\NAKa\ETX\DLEWa\ETX\DLEa\t\202V\254\162dipfsX\"\DC2 \214L\171\133\187\138\DEL\142\136(\166\236\216\147I\208\\\141\179\217\n\190\129f\207\173^\EOT\SYN_7@dsolcC\NUL\b\DC4\NUL3"), balance = 0x0, nonce = 0x0, codehash = Lit 0x700cccf2eabbaf54d8633df4864594968131e011198ab9289b6c45da3adf0ced, opIxMap = [0,0,1,1,2,3,4,5,6,6,6,7,8,8,9,10,11,12,13,13,14,15,16,16,16,17,18,18,19,20,20,21,22,23,23,23,23,23,24,25,25,25,26,27,28,28,28,28,28,29,30,30,30,31,32,33,33,33,33,33,34,35,35,35,36,37,38,38,38,38,38,39,40,40,40,41,42,43,43,43,43,43,44,45,45,45,46,47,48,48,48,48,48,49,50,50,50,51,52,52,53,54,55,56,57,57,57,57,57,58,59,59,59,60,61,62,62,62,62,62,63,64,64,64,65,66,67,67,67,67,67,68,69,69,69,70,71,72,72,72,72,72,73,74,74,74,75,76,76,77,78,79,80,81,81,81,81,81,82,83,83,83,84,85,86,86,86,86,86,87,88,88,88,89,90,91,91,91,91,91,92,93,93,93,94,95,96,96,96,96,96,97,98,98,98,99,100,101,101,101,101,101,102,103,103,103,104,105,105,106,107,108,109,110,110,110,110,110,111,112,112,112,113,114,115,115,115,115,115,116,117,117,117,118,119,120,120,120,120,120,121,122,122,122,123,124,125,125,126,127,128,129,129,129,130,130,131,132,133,133,134,135,135,136,137,138,138,139,140,141,141,142,143,143,143,143,143,143,144,144,145,146,147,148,149,150,151,152,152,153,154,154,154,155,156,157,157,157,158,159,160,160,161,162,163,164,165,166,167,168,168,168,169,169,169,170,171,171,172,172,172,173,174,175,175,175,176,177,178,178,179,180,181,182,183,184,185,185,186,187,187,187,188,189,190,190,190,191,191,192,193,194,195,196,196,197,198,199,200,201,201,202,203,203,203,204,205,206,206,206,207,207,207,208,209,209,210,210,210,211,212,213,213,213,214,215,216,216,216,217,217,218,219,220,221,221,222,223,223,224,225,226,227,228,229,229,230,231,231,231,232,233,234,234,234,235,235,235,236,237,237,238,238,238,239,240,241,241,241,242,243,244,245,246,246,246,247,247,247,248,249,249,250,250,250,251,252,253,253,253,254,255,256,256,256,257,257,257,258,259,259,260,260,260,261,262,263,263,264,264,265,266,266,267,268,269,270,270,271,272,273,274,275,276,277,277,277,278,278,278,279,280,280,281,281,281,282,283,284,284,285,285,286,287,287,288,289,290,291,291,292,293,294,295,296,297,298,298,298,299,299,300,301,302,302,303,304,304,305,306,307,307,308,309,310,310,311,312,312,312,312,313,313,314,315,316,317,318,319,320,321,321,321,322,322,322,323,324,324,325,325,325,326,327,328,328,328,329,330,331,331,331,332,332,332,333,334,334,335,335,335,336,337,338,338,338,339,340,341,341,341,342,342,342,343,344,344,345,345,345,346,347,348,348,348,349,350,351,351,351,352,352,352,353,354,354,355,355,355,356,357,358,358,359,359,360,361,362,363,364,365,366,366,367,368,369,370,371,372,373,373,373,374,374,374,375,376,376,377,377,377,378,379,380,380,381,381,382,383,384,385,385,386,387,388,389,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,406,407,408,409,410,410,411,411,412,413,414,415,415,416,417,418,419,419,420,420,421,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,442,443,444,444,444,445,446,447,448,449,449,450,451,452,453,454,454,455,456,457,458,459,460,461,462,462,463,464,465,466,467,468,469,470,470,471,472,472,472,473,474,475,476,476,476,477,478,479,480,481,482,483,483,483,484,485,485,485,486,486,486,487,488,489,490,491,492,493,494,495,496,497,498,498,499,500,501,502,502,503,504,505,506,506,507,508,509,510,510,511,512,512,512,513,514,514,515,516,516,516,516,517,517,518,519,520,521,521,522,523,523,523,524,525,525,525,526,527,528,528,529,530,531,532,533,534,535,536,536,537,537,538,538,539,540,541,542,543,543,544,545,546,547,547,548,548,549,550,550,551,552,553,554,555,556,557,558,558,558,559,560,561,562,562,562,563,564,565,566,567,568,569,570,571,572,573,573,574,574,575,576,577,578,578,578,579,580,581,581,581,582,583,584,585,586,587,588,589,589,590,591,592,593,594,594,595,595,596,596,597,598,599,600,601,602,602,603,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,604,605,606,606,607,608,609,609,610,611,612,613,614,615,616,617,618,619,620,621,621,622,623,624,625,625,626,627,628,629,629,630,631,632,633,633,634,635,635,635,636,637,637,638,639,639,639,639,640,640,641,642,643,644,644,645,646,646,646,647,648,648,648,649,650,651,651,652,652,653,653,654,655,656,657,657,658,659,660,661,661,662,663,664,665,665,666,667,668,668,669,670,671,672,673,674,674,675,676,677,678,678,679,680,681,682,682,683,684,685,686,686,687,688,688,688,689,690,690,691,692,692,692,692,693,693,694,695,696,697,697,698,699,699,699,700,701,701,701,702,703,704,704,705,705,706,706,707,708,709,710,710,711,712,713,714,714,715,716,717,718,718,719,720,721,722,723,724,724,725,725,726,726,727,728,729,730,731,731,732,733,734,735,735,736,736,737,738,738,739,740,741,742,743,744,745,745,745,746,747,747,748,749,749,749,749,750,750,751,752,753,754,754,755,755,756,757,758,759,759,760,760,761,762,763,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,764,765,765,766,767,767,768,769,770,771,771,772,773,773,773,774,775,776,776,777,777,778,778,779,780,781,782,783,784,785,786,787,788,788,788,789,790,791,791,792,792,793,793,794,795,796,797,798,798,799,800,801,802,802,803,803,804,805,806,807,807,808,809,810,811,812,813,814,815,816,817,818,819,820,820,821,822,823,824,825,826,826,826,827,828,828,829,829,830,830,831,832,833,834,835,835,836,837,838,839,839,840,840,841,842,843,844,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,860,860,861,862,862,863,864,864,864,864,865,865,866,867,868,869,869,870,870,871,872,873,874,874,875,875,876,877,878,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,880,880,881,882,882,883,884,885,886,886,887,888,888,888,889,890,891,891,892,892,893,893,894,895,896,897,898,898,899,900,901,902,902,903,903,904,905,906,907,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,924,924,925,926,927,928,928,928,929,930,931,932,933,934,935,936,937,937,938,938,939,939,940,941,942,943,944,944,945,946,947,948,948,949,949,950,951,951,952,953,954,955,956,957,958,959,959,959,960,961,962,963,963,963,964,965,966,967,968,969,970,971,972,973,974,974,975,975,976,977,978,979,979,979,980,981,982,982,982,983,984,985,986,987,988,989,990,990,991,992,993,994,995,995,996,997,997,998,998,999,999,1000,1001,1002,1003,1004,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1006,1007,1007,1008,1009,1009,1009,1010,1011,1012,1012,1013,1013,1013,1014,1015,1016,1017,1017,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1027,1028,1028,1029,1029,1030,1031,1032,1033,1034,1034,1035,1036,1037,1038,1038,1039,1039,1040,1041,1041,1042,1043,1044,1045,1046,1047,1048,1048,1048,1049,1050,1050,1051,1052,1052,1052,1052,1053,1053,1054,1055,1056,1057,1057,1058,1058,1059,1060,1061,1062,1062,1063,1063,1064,1065,1066,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1067,1068,1068,1069,1070,1070,1071,1072,1073,1074,1074,1075,1076,1076,1076,1077,1078,1079,1079,1080,1080,1081,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1091,1091,1092,1093,1094,1094,1095,1095,1096,1096,1097,1098,1099,1100,1101,1101,1102,1103,1104,1105,1105,1106,1106,1107,1108,1109,1110,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1123,1124,1125,1126,1127,1128,1129,1129,1129,1130,1131,1131,1132,1132,1133,1133,1134,1135,1136,1137,1138,1138,1139,1140,1141,1142,1142,1143,1143,1144,1145,1146,1147,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1163,1163,1164,1165,1165,1166,1167,1167,1167,1167,1168,1168,1169,1170,1171,1172,1172,1173,1173,1174,1175,1176,1177,1177,1178,1178,1179,1180,1181,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1182,1183,1183,1184,1185,1185,1186,1187,1188,1189,1189,1190,1191,1191,1191,1192,1193,1194,1194,1195,1195,1196,1196,1197,1198,1199,1200,1201,1201,1202,1203,1204,1205,1205,1206,1206,1207,1208,1209,1210,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1227,1227,1228,1229,1230,1231,1231,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1240,1241,1241,1242,1242,1243,1244,1245,1246,1247,1247,1248,1249,1250,1251,1251,1252,1252,1253,1254,1254,1255,1256,1257,1258,1259,1260,1261,1262,1262,1262,1263,1264,1265,1266,1266,1266,1267,1268,1269,1270,1271,1272,1273,1274,1274,1275,1275,1276,1276,1277,1278,1279,1280,1281,1281,1282,1283,1284,1285,1285,1286,1286,1287,1288,1288,1289,1290,1291,1292,1293,1294,1295,1296,1296,1296,1297,1298,1299,1300,1300,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1311,1312,1312,1313,1313,1314,1315,1316,1317,1318,1318,1319,1319,1320,1320,1321,1322,1323,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1324,1325,1326,1326,1327,1328,1328,1328,1329,1330,1331,1332,1332,1333,1334,1335,1336,1337,1337,1338,1339,1340,1341,1342,1343,1344,1345,1345,1346,1347,1348,1349,1350,1351,1352,1353,1353,1354,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1365,1366,1367,1368,1369,1370,1371,1371,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1382,1383,1384,1385,1386,1387,1387,1387,1388,1389,1390,1391,1391,1392,1392,1393,1394,1395,1396,1397,1398,1398,1399,1399,1400,1401,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1420,1421,1421,1422,1422,1423,1424,1425,1426,1427,1428,1429,1429,1429,1430,1431,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1440,1441,1442,1442,1443,1444,1445,1446,1447,1448,1448,1448,1449,1450,1450,1451,1452,1453,1454,1454,1454,1455,1456,1456,1456,1457,1458,1459,1460,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1472,1473,1474,1474,1475,1475,1476,1477,1478,1479,1480,1481,1481,1481,1482,1483,1483,1484,1485,1486,1487,1487,1487,1488,1489,1489,1489,1490,1491,1492,1493,1494,1494,1494,1495,1495,1496,1497,1498,1498,1498,1499,1500,1501,1502,1503,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1516,1517,1517,1518,1519,1520,1521,1522,1523,1523,1523,1524,1525,1525,1526,1527,1528,1529,1529,1529,1530,1531,1531,1531,1532,1533,1534,1534,1535,1536,1536,1537,1538,1539,1540,1541,1542,1542,1542,1543,1544,1544,1545,1546,1547,1548,1548,1548,1549,1550,1550,1550,1551,1552,1553,1554,1555,1555,1555,1556,1556,1557,1558,1559,1559,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1571,1571,1571,1571,1572,1572,1573,1574,1574,1575,1576,1576,1577,1577,1578,1579,1579,1580,1580,1581,1582,1583,1583,1584,1585,1586,1587,1587,1588,1589,1590,1591,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1592,1593,1593,1594,1595,1595,1596,1597,1598,1599,1599,1600,1601,1602,1603,1604,1604,1604,1604,1604,1605,1605,1606,1607,1607,1608,1609,1609,1610,1610,1611,1612,1612,1613,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1623,1623,1624,1625,1625,1625,1626,1626,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1636,1636,1637,1638,1638,1638,1639,1639,1639,1640,1641,1642,1643,1643,1643,1643,1643,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1653,1654,1655,1656,1657], codeOps = [(0,OpPush (Lit 0x80)),(2,OpPush (Lit 0x40)),(4,OpMstore),(5,OpCallvalue),(6,OpDup 1),(7,OpIszero),(8,OpPush (Lit 0x10)),(11,OpJumpi),(12,OpPush (Lit 0x0)),(14,OpDup 1),(15,OpRevert),(16,OpJumpdest),(17,OpPop),(18,OpPush (Lit 0x4)),(20,OpCalldatasize),(21,OpLt),(22,OpPush (Lit 0xf5)),(25,OpJumpi),(26,OpPush (Lit 0x0)),(28,OpCalldataload),(29,OpPush (Lit 0xe0)),(31,OpShr),(32,OpDup 1),(33,OpPush (Lit 0x70a08231)),(38,OpGt),(39,OpPush (Lit 0x97)),(42,OpJumpi),(43,OpDup 1),(44,OpPush (Lit 0x9dc29fac)),(49,OpGt),(50,OpPush (Lit 0x66)),(53,OpJumpi),(54,OpDup 1),(55,OpPush (Lit 0x9dc29fac)),(60,OpEq),(61,OpPush (Lit 0x238)),(64,OpJumpi),(65,OpDup 1),(66,OpPush (Lit 0xa9059cbb)),(71,OpEq),(72,OpPush (Lit 0x24b)),(75,OpJumpi),(76,OpDup 1),(77,OpPush (Lit 0xbf353dbb)),(82,OpEq),(83,OpPush (Lit 0x25e)),(86,OpJumpi),(87,OpDup 1),(88,OpPush (Lit 0xdd62ed3e)),(93,OpEq),(94,OpPush (Lit 0x27e)),(97,OpJumpi),(98,OpPush (Lit 0x0)),(100,OpDup 1),(101,OpRevert),(102,OpJumpdest),(103,OpDup 1),(104,OpPush (Lit 0x70a08231)),(109,OpEq),(110,OpPush (Lit 0x1c3)),(113,OpJumpi),(114,OpDup 1),(115,OpPush (Lit 0x7ecebe00)),(120,OpEq),(121,OpPush (Lit 0x1e3)),(124,OpJumpi),(125,OpDup 1),(126,OpPush (Lit 0x95d89b41)),(131,OpEq),(132,OpPush (Lit 0x203)),(135,OpJumpi),(136,OpDup 1),(137,OpPush (Lit 0x9c52a7f1)),(142,OpEq),(143,OpPush (Lit 0x225)),(146,OpJumpi),(147,OpPush (Lit 0x0)),(149,OpDup 1),(150,OpRevert),(151,OpJumpdest),(152,OpDup 1),(153,OpPush (Lit 0x23b872dd)),(158,OpGt),(159,OpPush (Lit 0xd3)),(162,OpJumpi),(163,OpDup 1),(164,OpPush (Lit 0x23b872dd)),(169,OpEq),(170,OpPush (Lit 0x16e)),(173,OpJumpi),(174,OpDup 1),(175,OpPush (Lit 0x313ce567)),(180,OpEq),(181,OpPush (Lit 0x181)),(184,OpJumpi),(185,OpDup 1),(186,OpPush (Lit 0x40c10f19)),(191,OpEq),(192,OpPush (Lit 0x19b)),(195,OpJumpi),(196,OpDup 1),(197,OpPush (Lit 0x65fae35e)),(202,OpEq),(203,OpPush (Lit 0x1b0)),(206,OpJumpi),(207,OpPush (Lit 0x0)),(209,OpDup 1),(210,OpRevert),(211,OpJumpdest),(212,OpDup 1),(213,OpPush (Lit 0x6fdde03)),(218,OpEq),(219,OpPush (Lit 0xfa)),(222,OpJumpi),(223,OpDup 1),(224,OpPush (Lit 0x95ea7b3)),(229,OpEq),(230,OpPush (Lit 0x134)),(233,OpJumpi),(234,OpDup 1),(235,OpPush (Lit 0x18160ddd)),(240,OpEq),(241,OpPush (Lit 0x157)),(244,OpJumpi),(245,OpJumpdest),(246,OpPush (Lit 0x0)),(248,OpDup 1),(249,OpRevert),(250,OpJumpdest),(251,OpPush (Lit 0x11e)),(254,OpPush (Lit 0x40)),(256,OpMload),(257,OpDup 1),(258,OpPush (Lit 0x40)),(260,OpAdd),(261,OpPush (Lit 0x40)),(263,OpMstore),(264,OpDup 1),(265,OpPush (Lit 0x5)),(267,OpDup 2),(268,OpMstore),(269,OpPush (Lit 0x20)),(271,OpAdd),(272,OpPush (Lit 0x2a37b5b2b7)),(278,OpPush (Lit 0xd9)),(280,OpShl),(281,OpDup 2),(282,OpMstore),(283,OpPop),(284,OpDup 2),(285,OpJump),(286,OpJumpdest),(287,OpPush (Lit 0x40)),(289,OpMload),(290,OpPush (Lit 0x12b)),(293,OpSwap 2),(294,OpSwap 1),(295,OpPush (Lit 0x86e)),(298,OpJump),(299,OpJumpdest),(300,OpPush (Lit 0x40)),(302,OpMload),(303,OpDup 1),(304,OpSwap 2),(305,OpSub),(306,OpSwap 1),(307,OpReturn),(308,OpJumpdest),(309,OpPush (Lit 0x147)),(312,OpPush (Lit 0x142)),(315,OpCalldatasize),(316,OpPush (Lit 0x4)),(318,OpPush (Lit 0x8d8)),(321,OpJump),(322,OpJumpdest),(323,OpPush (Lit 0x2a9)),(326,OpJump),(327,OpJumpdest),(328,OpPush (Lit 0x40)),(330,OpMload),(331,OpSwap 1),(332,OpIszero),(333,OpIszero),(334,OpDup 2),(335,OpMstore),(336,OpPush (Lit 0x20)),(338,OpAdd),(339,OpPush (Lit 0x12b)),(342,OpJump),(343,OpJumpdest),(344,OpPush (Lit 0x160)),(347,OpPush (Lit 0x1)),(349,OpSload),(350,OpDup 2),(351,OpJump),(352,OpJumpdest),(353,OpPush (Lit 0x40)),(355,OpMload),(356,OpSwap 1),(357,OpDup 2),(358,OpMstore),(359,OpPush (Lit 0x20)),(361,OpAdd),(362,OpPush (Lit 0x12b)),(365,OpJump),(366,OpJumpdest),(367,OpPush (Lit 0x147)),(370,OpPush (Lit 0x17c)),(373,OpCalldatasize),(374,OpPush (Lit 0x4)),(376,OpPush (Lit 0x902)),(379,OpJump),(380,OpJumpdest),(381,OpPush (Lit 0x316)),(384,OpJump),(385,OpJumpdest),(386,OpPush (Lit 0x189)),(389,OpPush (Lit 0x12)),(391,OpDup 2),(392,OpJump),(393,OpJumpdest),(394,OpPush (Lit 0x40)),(396,OpMload),(397,OpPush (Lit 0xff)),(399,OpSwap 1),(400,OpSwap 2),(401,OpAnd),(402,OpDup 2),(403,OpMstore),(404,OpPush (Lit 0x20)),(406,OpAdd),(407,OpPush (Lit 0x12b)),(410,OpJump),(411,OpJumpdest),(412,OpPush (Lit 0x1ae)),(415,OpPush (Lit 0x1a9)),(418,OpCalldatasize),(419,OpPush (Lit 0x4)),(421,OpPush (Lit 0x8d8)),(424,OpJump),(425,OpJumpdest),(426,OpPush (Lit 0x33c)),(429,OpJump),(430,OpJumpdest),(431,OpStop),(432,OpJumpdest),(433,OpPush (Lit 0x1ae)),(436,OpPush (Lit 0x1be)),(439,OpCalldatasize),(440,OpPush (Lit 0x4)),(442,OpPush (Lit 0x93e)),(445,OpJump),(446,OpJumpdest),(447,OpPush (Lit 0x400)),(450,OpJump),(451,OpJumpdest),(452,OpPush (Lit 0x160)),(455,OpPush (Lit 0x1d1)),(458,OpCalldatasize),(459,OpPush (Lit 0x4)),(461,OpPush (Lit 0x93e)),(464,OpJump),(465,OpJumpdest),(466,OpPush (Lit 0x2)),(468,OpPush (Lit 0x20)),(470,OpMstore),(471,OpPush (Lit 0x0)),(473,OpSwap 1),(474,OpDup 2),(475,OpMstore),(476,OpPush (Lit 0x40)),(478,OpSwap 1),(479,OpSha3),(480,OpSload),(481,OpDup 2),(482,OpJump),(483,OpJumpdest),(484,OpPush (Lit 0x160)),(487,OpPush (Lit 0x1f1)),(490,OpCalldatasize),(491,OpPush (Lit 0x4)),(493,OpPush (Lit 0x93e)),(496,OpJump),(497,OpJumpdest),(498,OpPush (Lit 0x4)),(500,OpPush (Lit 0x20)),(502,OpMstore),(503,OpPush (Lit 0x0)),(505,OpSwap 1),(506,OpDup 2),(507,OpMstore),(508,OpPush (Lit 0x40)),(510,OpSwap 1),(511,OpSha3),(512,OpSload),(513,OpDup 2),(514,OpJump),(515,OpJumpdest),(516,OpPush (Lit 0x11e)),(519,OpPush (Lit 0x40)),(521,OpMload),(522,OpDup 1),(523,OpPush (Lit 0x40)),(525,OpAdd),(526,OpPush (Lit 0x40)),(528,OpMstore),(529,OpDup 1),(530,OpPush (Lit 0x3)),(532,OpDup 2),(533,OpMstore),(534,OpPush (Lit 0x20)),(536,OpAdd),(537,OpPush (Lit 0x2a25a7)),(541,OpPush (Lit 0xe9)),(543,OpShl),(544,OpDup 2),(545,OpMstore),(546,OpPop),(547,OpDup 2),(548,OpJump),(549,OpJumpdest),(550,OpPush (Lit 0x1ae)),(553,OpPush (Lit 0x233)),(556,OpCalldatasize),(557,OpPush (Lit 0x4)),(559,OpPush (Lit 0x93e)),(562,OpJump),(563,OpJumpdest),(564,OpPush (Lit 0x44c)),(567,OpJump),(568,OpJumpdest),(569,OpPush (Lit 0x1ae)),(572,OpPush (Lit 0x246)),(575,OpCalldatasize),(576,OpPush (Lit 0x4)),(578,OpPush (Lit 0x8d8)),(581,OpJump),(582,OpJumpdest),(583,OpPush (Lit 0x495)),(586,OpJump),(587,OpJumpdest),(588,OpPush (Lit 0x147)),(591,OpPush (Lit 0x259)),(594,OpCalldatasize),(595,OpPush (Lit 0x4)),(597,OpPush (Lit 0x8d8)),(600,OpJump),(601,OpJumpdest),(602,OpPush (Lit 0x660)),(605,OpJump),(606,OpJumpdest),(607,OpPush (Lit 0x160)),(610,OpPush (Lit 0x26c)),(613,OpCalldatasize),(614,OpPush (Lit 0x4)),(616,OpPush (Lit 0x93e)),(619,OpJump),(620,OpJumpdest),(621,OpPush (Lit 0x0)),(623,OpPush (Lit 0x20)),(625,OpDup 2),(626,OpSwap 1),(627,OpMstore),(628,OpSwap 1),(629,OpDup 2),(630,OpMstore),(631,OpPush (Lit 0x40)),(633,OpSwap 1),(634,OpSha3),(635,OpSload),(636,OpDup 2),(637,OpJump),(638,OpJumpdest),(639,OpPush (Lit 0x160)),(642,OpPush (Lit 0x28c)),(645,OpCalldatasize),(646,OpPush (Lit 0x4)),(648,OpPush (Lit 0x959)),(651,OpJump),(652,OpJumpdest),(653,OpPush (Lit 0x3)),(655,OpPush (Lit 0x20)),(657,OpSwap 1),(658,OpDup 2),(659,OpMstore),(660,OpPush (Lit 0x0)),(662,OpSwap 3),(663,OpDup 4),(664,OpMstore),(665,OpPush (Lit 0x40)),(667,OpDup 1),(668,OpDup 5),(669,OpSha3),(670,OpSwap 1),(671,OpSwap 2),(672,OpMstore),(673,OpSwap 1),(674,OpDup 3),(675,OpMstore),(676,OpSwap 1),(677,OpSha3),(678,OpSload),(679,OpDup 2),(680,OpJump),(681,OpJumpdest),(682,OpCaller),(683,OpPush (Lit 0x0)),(685,OpDup 2),(686,OpDup 2),(687,OpMstore),(688,OpPush (Lit 0x3)),(690,OpPush (Lit 0x20)),(692,OpSwap 1),(693,OpDup 2),(694,OpMstore),(695,OpPush (Lit 0x40)),(697,OpDup 1),(698,OpDup 4),(699,OpSha3),(700,OpPush (Lit 0x1)),(702,OpPush (Lit 0x1)),(704,OpPush (Lit 0xa0)),(706,OpShl),(707,OpSub),(708,OpDup 8),(709,OpAnd),(710,OpDup 1),(711,OpDup 6),(712,OpMstore),(713,OpSwap 3),(714,OpMstore),(715,OpDup 1),(716,OpDup 4),(717,OpSha3),(718,OpDup 6),(719,OpSwap 1),(720,OpSstore),(721,OpMload),(722,OpSwap 2),(723,OpSwap 3),(724,OpSwap 1),(725,OpSwap 2),(726,OpPush (Lit 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925)),(759,OpSwap 1),(760,OpPush (Lit 0x304)),(763,OpSwap 1),(764,OpDup 7),(765,OpDup 2),(766,OpMstore),(767,OpPush (Lit 0x20)),(769,OpAdd),(770,OpSwap 1),(771,OpJump),(772,OpJumpdest),(773,OpPush (Lit 0x40)),(775,OpMload),(776,OpDup 1),(777,OpSwap 2),(778,OpSub),(779,OpSwap 1),(780,OpLog 3),(781,OpPop),(782,OpPush (Lit 0x1)),(784,OpJumpdest),(785,OpSwap 3),(786,OpSwap 2),(787,OpPop),(788,OpPop),(789,OpJump),(790,OpJumpdest),(791,OpPush (Lit 0x0)),(793,OpDup 1),(794,OpPush (Lit 0x324)),(797,OpDup 6),(798,OpDup 6),(799,OpDup 6),(800,OpPush (Lit 0x674)),(803,OpJump),(804,OpJumpdest),(805,OpSwap 1),(806,OpPop),(807,OpDup 1),(808,OpIszero),(809,OpPush (Lit 0x334)),(812,OpJumpi),(813,OpPush (Lit 0x334)),(816,OpPush (Lit 0x98c)),(819,OpJump),(820,OpJumpdest),(821,OpSwap 5),(822,OpSwap 4),(823,OpPop),(824,OpPop),(825,OpPop),(826,OpPop),(827,OpJump),(828,OpJumpdest),(829,OpCaller),(830,OpPush (Lit 0x0)),(832,OpSwap 1),(833,OpDup 2),(834,OpMstore),(835,OpPush (Lit 0x20)),(837,OpDup 2),(838,OpSwap 1),(839,OpMstore),(840,OpPush (Lit 0x40)),(842,OpSwap 1),(843,OpSha3),(844,OpSload),(845,OpPush (Lit 0x1)),(847,OpEq),(848,OpPush (Lit 0x374)),(851,OpJumpi),(852,OpPush (Lit 0x40)),(854,OpMload),(855,OpPush (Lit 0x461bcd)),(859,OpPush (Lit 0xe5)),(861,OpShl),(862,OpDup 2),(863,OpMstore),(864,OpPush (Lit 0x4)),(866,OpAdd),(867,OpPush (Lit 0x36b)),(870,OpSwap 1),(871,OpPush (Lit 0x9a2)),(874,OpJump),(875,OpJumpdest),(876,OpPush (Lit 0x40)),(878,OpMload),(879,OpDup 1),(880,OpSwap 2),(881,OpSub),(882,OpSwap 1),(883,OpRevert),(884,OpJumpdest),(885,OpPush (Lit 0x1)),(887,OpPush (Lit 0x1)),(889,OpPush (Lit 0xa0)),(891,OpShl),(892,OpSub),(893,OpDup 3),(894,OpAnd),(895,OpPush (Lit 0x0)),(897,OpSwap 1),(898,OpDup 2),(899,OpMstore),(900,OpPush (Lit 0x2)),(902,OpPush (Lit 0x20)),(904,OpMstore),(905,OpPush (Lit 0x40)),(907,OpDup 2),(908,OpSha3),(909,OpDup 1),(910,OpSload),(911,OpDup 4),(912,OpSwap 3),(913,OpSwap 1),(914,OpPush (Lit 0x39c)),(917,OpSwap 1),(918,OpDup 5),(919,OpSwap 1),(920,OpPush (Lit 0x9e0)),(923,OpJump),(924,OpJumpdest),(925,OpSwap 3),(926,OpPop),(927,OpPop),(928,OpDup 2),(929,OpSwap 1),(930,OpSstore),(931,OpPop),(932,OpDup 1),(933,OpPush (Lit 0x1)),(935,OpPush (Lit 0x0)),(937,OpDup 3),(938,OpDup 3),(939,OpSload),(940,OpPush (Lit 0x3b5)),(943,OpSwap 2),(944,OpSwap 1),(945,OpPush (Lit 0x9e0)),(948,OpJump),(949,OpJumpdest),(950,OpSwap 1),(951,OpSwap 2),(952,OpSstore),(953,OpPop),(954,OpPop),(955,OpPush (Lit 0x40)),(957,OpMload),(958,OpDup 2),(959,OpDup 2),(960,OpMstore),(961,OpPush (Lit 0x1)),(963,OpPush (Lit 0x1)),(965,OpPush (Lit 0xa0)),(967,OpShl),(968,OpSub),(969,OpDup 4),(970,OpAnd),(971,OpSwap 1),(972,OpPush (Lit 0x0)),(974,OpSwap 1),(975,OpPush (Lit 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)),(1008,OpSwap 1),(1009,OpPush (Lit 0x20)),(1011,OpAdd),(1012,OpJumpdest),(1013,OpPush (Lit 0x40)),(1015,OpMload),(1016,OpDup 1),(1017,OpSwap 2),(1018,OpSub),(1019,OpSwap 1),(1020,OpLog 3),(1021,OpPop),(1022,OpPop),(1023,OpJump),(1024,OpJumpdest),(1025,OpCaller),(1026,OpPush (Lit 0x0)),(1028,OpSwap 1),(1029,OpDup 2),(1030,OpMstore),(1031,OpPush (Lit 0x20)),(1033,OpDup 2),(1034,OpSwap 1),(1035,OpMstore),(1036,OpPush (Lit 0x40)),(1038,OpSwap 1),(1039,OpSha3),(1040,OpSload),(1041,OpPush (Lit 0x1)),(1043,OpEq),(1044,OpPush (Lit 0x42f)),(1047,OpJumpi),(1048,OpPush (Lit 0x40)),(1050,OpMload),(1051,OpPush (Lit 0x461bcd)),(1055,OpPush (Lit 0xe5)),(1057,OpShl),(1058,OpDup 2),(1059,OpMstore),(1060,OpPush (Lit 0x4)),(1062,OpAdd),(1063,OpPush (Lit 0x36b)),(1066,OpSwap 1),(1067,OpPush (Lit 0x9a2)),(1070,OpJump),(1071,OpJumpdest),(1072,OpPush (Lit 0x1)),(1074,OpPush (Lit 0x1)),(1076,OpPush (Lit 0xa0)),(1078,OpShl),(1079,OpSub),(1080,OpAnd),(1081,OpPush (Lit 0x0)),(1083,OpSwap 1),(1084,OpDup 2),(1085,OpMstore),(1086,OpPush (Lit 0x20)),(1088,OpDup 2),(1089,OpSwap 1),(1090,OpMstore),(1091,OpPush (Lit 0x40)),(1093,OpSwap 1),(1094,OpSha3),(1095,OpPush (Lit 0x1)),(1097,OpSwap 1),(1098,OpSstore),(1099,OpJump),(1100,OpJumpdest),(1101,OpCaller),(1102,OpPush (Lit 0x0)),(1104,OpSwap 1),(1105,OpDup 2),(1106,OpMstore),(1107,OpPush (Lit 0x20)),(1109,OpDup 2),(1110,OpSwap 1),(1111,OpMstore),(1112,OpPush (Lit 0x40)),(1114,OpSwap 1),(1115,OpSha3),(1116,OpSload),(1117,OpPush (Lit 0x1)),(1119,OpEq),(1120,OpPush (Lit 0x47b)),(1123,OpJumpi),(1124,OpPush (Lit 0x40)),(1126,OpMload),(1127,OpPush (Lit 0x461bcd)),(1131,OpPush (Lit 0xe5)),(1133,OpShl),(1134,OpDup 2),(1135,OpMstore),(1136,OpPush (Lit 0x4)),(1138,OpAdd),(1139,OpPush (Lit 0x36b)),(1142,OpSwap 1),(1143,OpPush (Lit 0x9a2)),(1146,OpJump),(1147,OpJumpdest),(1148,OpPush (Lit 0x1)),(1150,OpPush (Lit 0x1)),(1152,OpPush (Lit 0xa0)),(1154,OpShl),(1155,OpSub),(1156,OpAnd),(1157,OpPush (Lit 0x0)),(1159,OpSwap 1),(1160,OpDup 2),(1161,OpMstore),(1162,OpPush (Lit 0x20)),(1164,OpDup 2),(1165,OpSwap 1),(1166,OpMstore),(1167,OpPush (Lit 0x40)),(1169,OpDup 2),(1170,OpSha3),(1171,OpSstore),(1172,OpJump),(1173,OpJumpdest),(1174,OpPush (Lit 0x1)),(1176,OpPush (Lit 0x1)),(1178,OpPush (Lit 0xa0)),(1180,OpShl),(1181,OpSub),(1182,OpDup 3),(1183,OpAnd),(1184,OpPush (Lit 0x0)),(1186,OpSwap 1),(1187,OpDup 2),(1188,OpMstore),(1189,OpPush (Lit 0x2)),(1191,OpPush (Lit 0x20)),(1193,OpMstore),(1194,OpPush (Lit 0x40)),(1196,OpSwap 1),(1197,OpSha3),(1198,OpSload),(1199,OpDup 2),(1200,OpGt),(1201,OpIszero),(1202,OpPush (Lit 0x4f4)),(1205,OpJumpi),(1206,OpPush (Lit 0x40)),(1208,OpMload),(1209,OpPush (Lit 0x461bcd)),(1213,OpPush (Lit 0xe5)),(1215,OpShl),(1216,OpDup 2),(1217,OpMstore),(1218,OpPush (Lit 0x20)),(1220,OpPush (Lit 0x4)),(1222,OpDup 3),(1223,OpAdd),(1224,OpMstore),(1225,OpPush (Lit 0x14)),(1227,OpPush (Lit 0x24)),(1229,OpDup 3),(1230,OpAdd),(1231,OpMstore),(1232,OpPush (Lit 0x696e73756666696369656e742d62616c616e6365)),(1253,OpPush (Lit 0x60)),(1255,OpShl),(1256,OpPush (Lit 0x44)),(1258,OpDup 3),(1259,OpAdd),(1260,OpMstore),(1261,OpPush (Lit 0x64)),(1263,OpAdd),(1264,OpPush (Lit 0x36b)),(1267,OpJump),(1268,OpJumpdest),(1269,OpPush (Lit 0x1)),(1271,OpPush (Lit 0x1)),(1273,OpPush (Lit 0xa0)),(1275,OpShl),(1276,OpSub),(1277,OpDup 3),(1278,OpAnd),(1279,OpCaller),(1280,OpEq),(1281,OpDup 1),(1282,OpIszero),(1283,OpSwap 1),(1284,OpPush (Lit 0x532)),(1287,OpJumpi),(1288,OpPop),(1289,OpPush (Lit 0x1)),(1291,OpPush (Lit 0x1)),(1293,OpPush (Lit 0xa0)),(1295,OpShl),(1296,OpSub),(1297,OpDup 3),(1298,OpAnd),(1299,OpPush (Lit 0x0)),(1301,OpSwap 1),(1302,OpDup 2),(1303,OpMstore),(1304,OpPush (Lit 0x3)),(1306,OpPush (Lit 0x20)),(1308,OpSwap 1),(1309,OpDup 2),(1310,OpMstore),(1311,OpPush (Lit 0x40)),(1313,OpDup 1),(1314,OpDup 4),(1315,OpSha3),(1316,OpCaller),(1317,OpDup 5),(1318,OpMstore),(1319,OpSwap 1),(1320,OpSwap 2),(1321,OpMstore),(1322,OpSwap 1),(1323,OpSha3),(1324,OpSload),(1325,OpPush (Lit 0x0)),(1327,OpNot),(1328,OpEq),(1329,OpIszero),(1330,OpJumpdest),(1331,OpIszero),(1332,OpPush (Lit 0x5dc)),(1335,OpJumpi),(1336,OpPush (Lit 0x1)),(1338,OpPush (Lit 0x1)),(1340,OpPush (Lit 0xa0)),(1342,OpShl),(1343,OpSub),(1344,OpDup 3),(1345,OpAnd),(1346,OpPush (Lit 0x0)),(1348,OpSwap 1),(1349,OpDup 2),(1350,OpMstore),(1351,OpPush (Lit 0x3)),(1353,OpPush (Lit 0x20)),(1355,OpSwap 1),(1356,OpDup 2),(1357,OpMstore),(1358,OpPush (Lit 0x40)),(1360,OpDup 1),(1361,OpDup 4),(1362,OpSha3),(1363,OpCaller),(1364,OpDup 5),(1365,OpMstore),(1366,OpSwap 1),(1367,OpSwap 2),(1368,OpMstore),(1369,OpSwap 1),(1370,OpSha3),(1371,OpSload),(1372,OpDup 2),(1373,OpGt),(1374,OpIszero),(1375,OpPush (Lit 0x5a3)),(1378,OpJumpi),(1379,OpPush (Lit 0x40)),(1381,OpMload),(1382,OpPush (Lit 0x461bcd)),(1386,OpPush (Lit 0xe5)),(1388,OpShl),(1389,OpDup 2),(1390,OpMstore),(1391,OpPush (Lit 0x20)),(1393,OpPush (Lit 0x4)),(1395,OpDup 3),(1396,OpAdd),(1397,OpMstore),(1398,OpPush (Lit 0x16)),(1400,OpPush (Lit 0x24)),(1402,OpDup 3),(1403,OpAdd),(1404,OpMstore),(1405,OpPush (Lit 0x696e73756666696369656e742d616c6c6f77616e6365)),(1428,OpPush (Lit 0x50)),(1430,OpShl),(1431,OpPush (Lit 0x44)),(1433,OpDup 3),(1434,OpAdd),(1435,OpMstore),(1436,OpPush (Lit 0x64)),(1438,OpAdd),(1439,OpPush (Lit 0x36b)),(1442,OpJump),(1443,OpJumpdest),(1444,OpPush (Lit 0x1)),(1446,OpPush (Lit 0x1)),(1448,OpPush (Lit 0xa0)),(1450,OpShl),(1451,OpSub),(1452,OpDup 3),(1453,OpAnd),(1454,OpPush (Lit 0x0)),(1456,OpSwap 1),(1457,OpDup 2),(1458,OpMstore),(1459,OpPush (Lit 0x3)),(1461,OpPush (Lit 0x20)),(1463,OpSwap 1),(1464,OpDup 2),(1465,OpMstore),(1466,OpPush (Lit 0x40)),(1468,OpDup 1),(1469,OpDup 4),(1470,OpSha3),(1471,OpCaller),(1472,OpDup 5),(1473,OpMstore),(1474,OpSwap 1),(1475,OpSwap 2),(1476,OpMstore),(1477,OpDup 2),(1478,OpSha3),(1479,OpDup 1),(1480,OpSload),(1481,OpDup 4),(1482,OpSwap 3),(1483,OpSwap 1),(1484,OpPush (Lit 0x5d6)),(1487,OpSwap 1),(1488,OpDup 5),(1489,OpSwap 1),(1490,OpPush (Lit 0x9f3)),(1493,OpJump),(1494,OpJumpdest),(1495,OpSwap 1),(1496,OpSwap 2),(1497,OpSstore),(1498,OpPop),(1499,OpPop),(1500,OpJumpdest),(1501,OpPush (Lit 0x1)),(1503,OpPush (Lit 0x1)),(1505,OpPush (Lit 0xa0)),(1507,OpShl),(1508,OpSub),(1509,OpDup 3),(1510,OpAnd),(1511,OpPush (Lit 0x0)),(1513,OpSwap 1),(1514,OpDup 2),(1515,OpMstore),(1516,OpPush (Lit 0x2)),(1518,OpPush (Lit 0x20)),(1520,OpMstore),(1521,OpPush (Lit 0x40)),(1523,OpDup 2),(1524,OpSha3),(1525,OpDup 1),(1526,OpSload),(1527,OpDup 4),(1528,OpSwap 3),(1529,OpSwap 1),(1530,OpPush (Lit 0x604)),(1533,OpSwap 1),(1534,OpDup 5),(1535,OpSwap 1),(1536,OpPush (Lit 0x9f3)),(1539,OpJump),(1540,OpJumpdest),(1541,OpSwap 3),(1542,OpPop),(1543,OpPop),(1544,OpDup 2),(1545,OpSwap 1),(1546,OpSstore),(1547,OpPop),(1548,OpDup 1),(1549,OpPush (Lit 0x1)),(1551,OpPush (Lit 0x0)),(1553,OpDup 3),(1554,OpDup 3),(1555,OpSload),(1556,OpPush (Lit 0x61d)),(1559,OpSwap 2),(1560,OpSwap 1),(1561,OpPush (Lit 0x9f3)),(1564,OpJump),(1565,OpJumpdest),(1566,OpSwap 1),(1567,OpSwap 2),(1568,OpSstore),(1569,OpPop),(1570,OpPop),(1571,OpPush (Lit 0x40)),(1573,OpMload),(1574,OpDup 2),(1575,OpDup 2),(1576,OpMstore),(1577,OpPush (Lit 0x0)),(1579,OpSwap 1),(1580,OpPush (Lit 0x1)),(1582,OpPush (Lit 0x1)),(1584,OpPush (Lit 0xa0)),(1586,OpShl),(1587,OpSub),(1588,OpDup 5),(1589,OpAnd),(1590,OpSwap 1),(1591,OpPush (Lit 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)),(1624,OpSwap 1),(1625,OpPush (Lit 0x20)),(1627,OpAdd),(1628,OpPush (Lit 0x3f4)),(1631,OpJump),(1632,OpJumpdest),(1633,OpPush (Lit 0x0)),(1635,OpPush (Lit 0x66d)),(1638,OpCaller),(1639,OpDup 5),(1640,OpDup 5),(1641,OpPush (Lit 0x316)),(1644,OpJump),(1645,OpJumpdest),(1646,OpSwap 4),(1647,OpSwap 3),(1648,OpPop),(1649,OpPop),(1650,OpPop),(1651,OpJump),(1652,OpJumpdest),(1653,OpPush (Lit 0x1)),(1655,OpPush (Lit 0x1)),(1657,OpPush (Lit 0xa0)),(1659,OpShl),(1660,OpSub),(1661,OpDup 4),(1662,OpAnd),(1663,OpPush (Lit 0x0)),(1665,OpSwap 1),(1666,OpDup 2),(1667,OpMstore),(1668,OpPush (Lit 0x2)),(1670,OpPush (Lit 0x20)),(1672,OpMstore),(1673,OpPush (Lit 0x40)),(1675,OpDup 2),(1676,OpSha3),(1677,OpSload),(1678,OpDup 3),(1679,OpGt),(1680,OpIszero),(1681,OpPush (Lit 0x6d3)),(1684,OpJumpi),(1685,OpPush (Lit 0x40)),(1687,OpMload),(1688,OpPush (Lit 0x461bcd)),(1692,OpPush (Lit 0xe5)),(1694,OpShl),(1695,OpDup 2),(1696,OpMstore),(1697,OpPush (Lit 0x20)),(1699,OpPush (Lit 0x4)),(1701,OpDup 3),(1702,OpAdd),(1703,OpMstore),(1704,OpPush (Lit 0x14)),(1706,OpPush (Lit 0x24)),(1708,OpDup 3),(1709,OpAdd),(1710,OpMstore),(1711,OpPush (Lit 0x696e73756666696369656e742d62616c616e6365)),(1732,OpPush (Lit 0x60)),(1734,OpShl),(1735,OpPush (Lit 0x44)),(1737,OpDup 3),(1738,OpAdd),(1739,OpMstore),(1740,OpPush (Lit 0x64)),(1742,OpAdd),(1743,OpPush (Lit 0x36b)),(1746,OpJump),(1747,OpJumpdest),(1748,OpPush (Lit 0x1)),(1750,OpPush (Lit 0x1)),(1752,OpPush (Lit 0xa0)),(1754,OpShl),(1755,OpSub),(1756,OpDup 5),(1757,OpAnd),(1758,OpCaller),(1759,OpEq),(1760,OpDup 1),(1761,OpIszero),(1762,OpSwap 1),(1763,OpPush (Lit 0x711)),(1766,OpJumpi),(1767,OpPop),(1768,OpPush (Lit 0x1)),(1770,OpPush (Lit 0x1)),(1772,OpPush (Lit 0xa0)),(1774,OpShl),(1775,OpSub),(1776,OpDup 5),(1777,OpAnd),(1778,OpPush (Lit 0x0)),(1780,OpSwap 1),(1781,OpDup 2),(1782,OpMstore),(1783,OpPush (Lit 0x3)),(1785,OpPush (Lit 0x20)),(1787,OpSwap 1),(1788,OpDup 2),(1789,OpMstore),(1790,OpPush (Lit 0x40)),(1792,OpDup 1),(1793,OpDup 4),(1794,OpSha3),(1795,OpCaller),(1796,OpDup 5),(1797,OpMstore),(1798,OpSwap 1),(1799,OpSwap 2),(1800,OpMstore),(1801,OpSwap 1),(1802,OpSha3),(1803,OpSload),(1804,OpPush (Lit 0x0)),(1806,OpNot),(1807,OpEq),(1808,OpIszero),(1809,OpJumpdest),(1810,OpIszero),(1811,OpPush (Lit 0x7bb)),(1814,OpJumpi),(1815,OpPush (Lit 0x1)),(1817,OpPush (Lit 0x1)),(1819,OpPush (Lit 0xa0)),(1821,OpShl),(1822,OpSub),(1823,OpDup 5),(1824,OpAnd),(1825,OpPush (Lit 0x0)),(1827,OpSwap 1),(1828,OpDup 2),(1829,OpMstore),(1830,OpPush (Lit 0x3)),(1832,OpPush (Lit 0x20)),(1834,OpSwap 1),(1835,OpDup 2),(1836,OpMstore),(1837,OpPush (Lit 0x40)),(1839,OpDup 1),(1840,OpDup 4),(1841,OpSha3),(1842,OpCaller),(1843,OpDup 5),(1844,OpMstore),(1845,OpSwap 1),(1846,OpSwap 2),(1847,OpMstore),(1848,OpSwap 1),(1849,OpSha3),(1850,OpSload),(1851,OpDup 3),(1852,OpGt),(1853,OpIszero),(1854,OpPush (Lit 0x782)),(1857,OpJumpi),(1858,OpPush (Lit 0x40)),(1860,OpMload),(1861,OpPush (Lit 0x461bcd)),(1865,OpPush (Lit 0xe5)),(1867,OpShl),(1868,OpDup 2),(1869,OpMstore),(1870,OpPush (Lit 0x20)),(1872,OpPush (Lit 0x4)),(1874,OpDup 3),(1875,OpAdd),(1876,OpMstore),(1877,OpPush (Lit 0x16)),(1879,OpPush (Lit 0x24)),(1881,OpDup 3),(1882,OpAdd),(1883,OpMstore),(1884,OpPush (Lit 0x696e73756666696369656e742d616c6c6f77616e6365)),(1907,OpPush (Lit 0x50)),(1909,OpShl),(1910,OpPush (Lit 0x44)),(1912,OpDup 3),(1913,OpAdd),(1914,OpMstore),(1915,OpPush (Lit 0x64)),(1917,OpAdd),(1918,OpPush (Lit 0x36b)),(1921,OpJump),(1922,OpJumpdest),(1923,OpPush (Lit 0x1)),(1925,OpPush (Lit 0x1)),(1927,OpPush (Lit 0xa0)),(1929,OpShl),(1930,OpSub),(1931,OpDup 5),(1932,OpAnd),(1933,OpPush (Lit 0x0)),(1935,OpSwap 1),(1936,OpDup 2),(1937,OpMstore),(1938,OpPush (Lit 0x3)),(1940,OpPush (Lit 0x20)),(1942,OpSwap 1),(1943,OpDup 2),(1944,OpMstore),(1945,OpPush (Lit 0x40)),(1947,OpDup 1),(1948,OpDup 4),(1949,OpSha3),(1950,OpCaller),(1951,OpDup 5),(1952,OpMstore),(1953,OpSwap 1),(1954,OpSwap 2),(1955,OpMstore),(1956,OpDup 2),(1957,OpSha3),(1958,OpDup 1),(1959,OpSload),(1960,OpDup 5),(1961,OpSwap 3),(1962,OpSwap 1),(1963,OpPush (Lit 0x7b5)),(1966,OpSwap 1),(1967,OpDup 5),(1968,OpSwap 1),(1969,OpPush (Lit 0x9f3)),(1972,OpJump),(1973,OpJumpdest),(1974,OpSwap 1),(1975,OpSwap 2),(1976,OpSstore),(1977,OpPop),(1978,OpPop),(1979,OpJumpdest),(1980,OpPush (Lit 0x1)),(1982,OpPush (Lit 0x1)),(1984,OpPush (Lit 0xa0)),(1986,OpShl),(1987,OpSub),(1988,OpDup 5),(1989,OpAnd),(1990,OpPush (Lit 0x0)),(1992,OpSwap 1),(1993,OpDup 2),(1994,OpMstore),(1995,OpPush (Lit 0x2)),(1997,OpPush (Lit 0x20)),(1999,OpMstore),(2000,OpPush (Lit 0x40)),(2002,OpDup 2),(2003,OpSha3),(2004,OpDup 1),(2005,OpSload),(2006,OpDup 5),(2007,OpSwap 3),(2008,OpSwap 1),(2009,OpPush (Lit 0x7e3)),(2012,OpSwap 1),(2013,OpDup 5),(2014,OpSwap 1),(2015,OpPush (Lit 0x9f3)),(2018,OpJump),(2019,OpJumpdest),(2020,OpSwap 1),(2021,OpSwap 2),(2022,OpSstore),(2023,OpPop),(2024,OpPop),(2025,OpPush (Lit 0x1)),(2027,OpPush (Lit 0x1)),(2029,OpPush (Lit 0xa0)),(2031,OpShl),(2032,OpSub),(2033,OpDup 4),(2034,OpAnd),(2035,OpPush (Lit 0x0)),(2037,OpSwap 1),(2038,OpDup 2),(2039,OpMstore),(2040,OpPush (Lit 0x2)),(2042,OpPush (Lit 0x20)),(2044,OpMstore),(2045,OpPush (Lit 0x40)),(2047,OpDup 2),(2048,OpSha3),(2049,OpDup 1),(2050,OpSload),(2051,OpDup 5),(2052,OpSwap 3),(2053,OpSwap 1),(2054,OpPush (Lit 0x810)),(2057,OpSwap 1),(2058,OpDup 5),(2059,OpSwap 1),(2060,OpPush (Lit 0x9e0)),(2063,OpJump),(2064,OpJumpdest),(2065,OpSwap 3),(2066,OpPop),(2067,OpPop),(2068,OpDup 2),(2069,OpSwap 1),(2070,OpSstore),(2071,OpPop),(2072,OpDup 3),(2073,OpPush (Lit 0x1)),(2075,OpPush (Lit 0x1)),(2077,OpPush (Lit 0xa0)),(2079,OpShl),(2080,OpSub),(2081,OpAnd),(2082,OpDup 5),(2083,OpPush (Lit 0x1)),(2085,OpPush (Lit 0x1)),(2087,OpPush (Lit 0xa0)),(2089,OpShl),(2090,OpSub),(2091,OpAnd),(2092,OpPush (Lit 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)),(2125,OpDup 5),(2126,OpPush (Lit 0x40)),(2128,OpMload),(2129,OpPush (Lit 0x85c)),(2132,OpSwap 2),(2133,OpDup 2),(2134,OpMstore),(2135,OpPush (Lit 0x20)),(2137,OpAdd),(2138,OpSwap 1),(2139,OpJump),(2140,OpJumpdest),(2141,OpPush (Lit 0x40)),(2143,OpMload),(2144,OpDup 1),(2145,OpSwap 2),(2146,OpSub),(2147,OpSwap 1),(2148,OpLog 3),(2149,OpPop),(2150,OpPush (Lit 0x1)),(2152,OpSwap 4),(2153,OpSwap 3),(2154,OpPop),(2155,OpPop),(2156,OpPop),(2157,OpJump),(2158,OpJumpdest),(2159,OpPush (Lit 0x0)),(2161,OpPush (Lit 0x20)),(2163,OpDup 1),(2164,OpDup 4),(2165,OpMstore),(2166,OpDup 4),(2167,OpMload),(2168,OpDup 1),(2169,OpDup 3),(2170,OpDup 6),(2171,OpAdd),(2172,OpMstore),(2173,OpPush (Lit 0x0)),(2175,OpJumpdest),(2176,OpDup 2),(2177,OpDup 2),(2178,OpLt),(2179,OpIszero),(2180,OpPush (Lit 0x89b)),(2183,OpJumpi),(2184,OpDup 6),(2185,OpDup 2),(2186,OpAdd),(2187,OpDup 4),(2188,OpAdd),(2189,OpMload),(2190,OpDup 6),(2191,OpDup 3),(2192,OpAdd),(2193,OpPush (Lit 0x40)),(2195,OpAdd),(2196,OpMstore),(2197,OpDup 3),(2198,OpAdd),(2199,OpPush (Lit 0x87f)),(2202,OpJump),(2203,OpJumpdest),(2204,OpPop),(2205,OpPush (Lit 0x0)),(2207,OpPush (Lit 0x40)),(2209,OpDup 3),(2210,OpDup 7),(2211,OpAdd),(2212,OpAdd),(2213,OpMstore),(2214,OpPush (Lit 0x40)),(2216,OpPush (Lit 0x1f)),(2218,OpNot),(2219,OpPush (Lit 0x1f)),(2221,OpDup 4),(2222,OpAdd),(2223,OpAnd),(2224,OpDup 6),(2225,OpAdd),(2226,OpAdd),(2227,OpSwap 3),(2228,OpPop),(2229,OpPop),(2230,OpPop),(2231,OpSwap 3),(2232,OpSwap 2),(2233,OpPop),(2234,OpPop),(2235,OpJump),(2236,OpJumpdest),(2237,OpDup 1),(2238,OpCalldataload),(2239,OpPush (Lit 0x1)),(2241,OpPush (Lit 0x1)),(2243,OpPush (Lit 0xa0)),(2245,OpShl),(2246,OpSub),(2247,OpDup 2),(2248,OpAnd),(2249,OpDup 2),(2250,OpEq),(2251,OpPush (Lit 0x8d3)),(2254,OpJumpi),(2255,OpPush (Lit 0x0)),(2257,OpDup 1),(2258,OpRevert),(2259,OpJumpdest),(2260,OpSwap 2),(2261,OpSwap 1),(2262,OpPop),(2263,OpJump),(2264,OpJumpdest),(2265,OpPush (Lit 0x0)),(2267,OpDup 1),(2268,OpPush (Lit 0x40)),(2270,OpDup 4),(2271,OpDup 6),(2272,OpSub),(2273,OpSlt),(2274,OpIszero),(2275,OpPush (Lit 0x8eb)),(2278,OpJumpi),(2279,OpPush (Lit 0x0)),(2281,OpDup 1),(2282,OpRevert),(2283,OpJumpdest),(2284,OpPush (Lit 0x8f4)),(2287,OpDup 4),(2288,OpPush (Lit 0x8bc)),(2291,OpJump),(2292,OpJumpdest),(2293,OpSwap 5),(2294,OpPush (Lit 0x20)),(2296,OpSwap 4),(2297,OpSwap 1),(2298,OpSwap 4),(2299,OpAdd),(2300,OpCalldataload),(2301,OpSwap 4),(2302,OpPop),(2303,OpPop),(2304,OpPop),(2305,OpJump),(2306,OpJumpdest),(2307,OpPush (Lit 0x0)),(2309,OpDup 1),(2310,OpPush (Lit 0x0)),(2312,OpPush (Lit 0x60)),(2314,OpDup 5),(2315,OpDup 7),(2316,OpSub),(2317,OpSlt),(2318,OpIszero),(2319,OpPush (Lit 0x917)),(2322,OpJumpi),(2323,OpPush (Lit 0x0)),(2325,OpDup 1),(2326,OpRevert),(2327,OpJumpdest),(2328,OpPush (Lit 0x920)),(2331,OpDup 5),(2332,OpPush (Lit 0x8bc)),(2335,OpJump),(2336,OpJumpdest),(2337,OpSwap 3),(2338,OpPop),(2339,OpPush (Lit 0x92e)),(2342,OpPush (Lit 0x20)),(2344,OpDup 6),(2345,OpAdd),(2346,OpPush (Lit 0x8bc)),(2349,OpJump),(2350,OpJumpdest),(2351,OpSwap 2),(2352,OpPop),(2353,OpPush (Lit 0x40)),(2355,OpDup 5),(2356,OpAdd),(2357,OpCalldataload),(2358,OpSwap 1),(2359,OpPop),(2360,OpSwap 3),(2361,OpPop),(2362,OpSwap 3),(2363,OpPop),(2364,OpSwap 3),(2365,OpJump),(2366,OpJumpdest),(2367,OpPush (Lit 0x0)),(2369,OpPush (Lit 0x20)),(2371,OpDup 3),(2372,OpDup 5),(2373,OpSub),(2374,OpSlt),(2375,OpIszero),(2376,OpPush (Lit 0x950)),(2379,OpJumpi),(2380,OpPush (Lit 0x0)),(2382,OpDup 1),(2383,OpRevert),(2384,OpJumpdest),(2385,OpPush (Lit 0x66d)),(2388,OpDup 3),(2389,OpPush (Lit 0x8bc)),(2392,OpJump),(2393,OpJumpdest),(2394,OpPush (Lit 0x0)),(2396,OpDup 1),(2397,OpPush (Lit 0x40)),(2399,OpDup 4),(2400,OpDup 6),(2401,OpSub),(2402,OpSlt),(2403,OpIszero),(2404,OpPush (Lit 0x96c)),(2407,OpJumpi),(2408,OpPush (Lit 0x0)),(2410,OpDup 1),(2411,OpRevert),(2412,OpJumpdest),(2413,OpPush (Lit 0x975)),(2416,OpDup 4),(2417,OpPush (Lit 0x8bc)),(2420,OpJump),(2421,OpJumpdest),(2422,OpSwap 2),(2423,OpPop),(2424,OpPush (Lit 0x983)),(2427,OpPush (Lit 0x20)),(2429,OpDup 5),(2430,OpAdd),(2431,OpPush (Lit 0x8bc)),(2434,OpJump),(2435,OpJumpdest),(2436,OpSwap 1),(2437,OpPop),(2438,OpSwap 3),(2439,OpPop),(2440,OpSwap 3),(2441,OpSwap 1),(2442,OpPop),(2443,OpJump),(2444,OpJumpdest),(2445,OpPush (Lit 0x4e487b71)),(2450,OpPush (Lit 0xe0)),(2452,OpShl),(2453,OpPush (Lit 0x0)),(2455,OpMstore),(2456,OpPush (Lit 0x1)),(2458,OpPush (Lit 0x4)),(2460,OpMstore),(2461,OpPush (Lit 0x24)),(2463,OpPush (Lit 0x0)),(2465,OpRevert),(2466,OpJumpdest),(2467,OpPush (Lit 0x20)),(2469,OpDup 1),(2470,OpDup 3),(2471,OpMstore),(2472,OpPush (Lit 0xe)),(2474,OpSwap 1),(2475,OpDup 3),(2476,OpAdd),(2477,OpMstore),(2478,OpPush (Lit 0x1b9bdd0b585d5d1a1bdc9a5e9959)),(2493,OpPush (Lit 0x92)),(2495,OpShl),(2496,OpPush (Lit 0x40)),(2498,OpDup 3),(2499,OpAdd),(2500,OpMstore),(2501,OpPush (Lit 0x60)),(2503,OpAdd),(2504,OpSwap 1),(2505,OpJump),(2506,OpJumpdest),(2507,OpPush (Lit 0x4e487b71)),(2512,OpPush (Lit 0xe0)),(2514,OpShl),(2515,OpPush (Lit 0x0)),(2517,OpMstore),(2518,OpPush (Lit 0x11)),(2520,OpPush (Lit 0x4)),(2522,OpMstore),(2523,OpPush (Lit 0x24)),(2525,OpPush (Lit 0x0)),(2527,OpRevert),(2528,OpJumpdest),(2529,OpDup 1),(2530,OpDup 3),(2531,OpAdd),(2532,OpDup 1),(2533,OpDup 3),(2534,OpGt),(2535,OpIszero),(2536,OpPush (Lit 0x310)),(2539,OpJumpi),(2540,OpPush (Lit 0x310)),(2543,OpPush (Lit 0x9ca)),(2546,OpJump),(2547,OpJumpdest),(2548,OpDup 2),(2549,OpDup 2),(2550,OpSub),(2551,OpDup 2),(2552,OpDup 2),(2553,OpGt),(2554,OpIszero),(2555,OpPush (Lit 0x310)),(2558,OpJumpi),(2559,OpPush (Lit 0x310)),(2562,OpPush (Lit 0x9ca)),(2565,OpJump),(2566,OpUnknown 254)], external = False})]}) (Revert (ConcreteBuf "NH{q\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\SOH"))


; logic
; TODO: this creates an error when used with z3?
;(set-logic QF_AUFBV)
(set-logic ALL)

; types
(define-sort Byte () (_ BitVec 8))
(define-sort Word () (_ BitVec 256))
(define-sort Buf () (Array Word Byte))

; address -> slot -> value
(define-sort Storage () (Array Word (Array Word Word)))

; hash functions
(declare-fun keccak (Buf) Word)
(declare-fun sha256 (Buf) Word)

(define-fun max ((a (_ BitVec 256)) (b (_ BitVec 256))) (_ BitVec 256) (ite (bvult a b) b a))

; word indexing
(define-fun indexWord31 ((w Word)) Byte ((_ extract 7 0) w))
(define-fun indexWord30 ((w Word)) Byte ((_ extract 15 8) w))
(define-fun indexWord29 ((w Word)) Byte ((_ extract 23 16) w))
(define-fun indexWord28 ((w Word)) Byte ((_ extract 31 24) w))
(define-fun indexWord27 ((w Word)) Byte ((_ extract 39 32) w))
(define-fun indexWord26 ((w Word)) Byte ((_ extract 47 40) w))
(define-fun indexWord25 ((w Word)) Byte ((_ extract 55 48) w))
(define-fun indexWord24 ((w Word)) Byte ((_ extract 63 56) w))
(define-fun indexWord23 ((w Word)) Byte ((_ extract 71 64) w))
(define-fun indexWord22 ((w Word)) Byte ((_ extract 79 72) w))
(define-fun indexWord21 ((w Word)) Byte ((_ extract 87 80) w))
(define-fun indexWord20 ((w Word)) Byte ((_ extract 95 88) w))
(define-fun indexWord19 ((w Word)) Byte ((_ extract 103 96) w))
(define-fun indexWord18 ((w Word)) Byte ((_ extract 111 104) w))
(define-fun indexWord17 ((w Word)) Byte ((_ extract 119 112) w))
(define-fun indexWord16 ((w Word)) Byte ((_ extract 127 120) w))
(define-fun indexWord15 ((w Word)) Byte ((_ extract 135 128) w))
(define-fun indexWord14 ((w Word)) Byte ((_ extract 143 136) w))
(define-fun indexWord13 ((w Word)) Byte ((_ extract 151 144) w))
(define-fun indexWord12 ((w Word)) Byte ((_ extract 159 152) w))
(define-fun indexWord11 ((w Word)) Byte ((_ extract 167 160) w))
(define-fun indexWord10 ((w Word)) Byte ((_ extract 175 168) w))
(define-fun indexWord9 ((w Word)) Byte ((_ extract 183 176) w))
(define-fun indexWord8 ((w Word)) Byte ((_ extract 191 184) w))
(define-fun indexWord7 ((w Word)) Byte ((_ extract 199 192) w))
(define-fun indexWord6 ((w Word)) Byte ((_ extract 207 200) w))
(define-fun indexWord5 ((w Word)) Byte ((_ extract 215 208) w))
(define-fun indexWord4 ((w Word)) Byte ((_ extract 223 216) w))
(define-fun indexWord3 ((w Word)) Byte ((_ extract 231 224) w))
(define-fun indexWord2 ((w Word)) Byte ((_ extract 239 232) w))
(define-fun indexWord1 ((w Word)) Byte ((_ extract 247 240) w))
(define-fun indexWord0 ((w Word)) Byte ((_ extract 255 248) w))

; symbolic word indexing
; a bitshift based version might be more performant here...
(define-fun indexWord ((idx Word) (w Word)) Byte
  (ite (bvuge idx (_ bv32 256)) (_ bv0 8)
  (ite (= idx (_ bv31 256)) (indexWord31 w)
  (ite (= idx (_ bv30 256)) (indexWord30 w)
  (ite (= idx (_ bv29 256)) (indexWord29 w)
  (ite (= idx (_ bv28 256)) (indexWord28 w)
  (ite (= idx (_ bv27 256)) (indexWord27 w)
  (ite (= idx (_ bv26 256)) (indexWord26 w)
  (ite (= idx (_ bv25 256)) (indexWord25 w)
  (ite (= idx (_ bv24 256)) (indexWord24 w)
  (ite (= idx (_ bv23 256)) (indexWord23 w)
  (ite (= idx (_ bv22 256)) (indexWord22 w)
  (ite (= idx (_ bv21 256)) (indexWord21 w)
  (ite (= idx (_ bv20 256)) (indexWord20 w)
  (ite (= idx (_ bv19 256)) (indexWord19 w)
  (ite (= idx (_ bv18 256)) (indexWord18 w)
  (ite (= idx (_ bv17 256)) (indexWord17 w)
  (ite (= idx (_ bv16 256)) (indexWord16 w)
  (ite (= idx (_ bv15 256)) (indexWord15 w)
  (ite (= idx (_ bv14 256)) (indexWord14 w)
  (ite (= idx (_ bv13 256)) (indexWord13 w)
  (ite (= idx (_ bv12 256)) (indexWord12 w)
  (ite (= idx (_ bv11 256)) (indexWord11 w)
  (ite (= idx (_ bv10 256)) (indexWord10 w)
  (ite (= idx (_ bv9 256)) (indexWord9 w)
  (ite (= idx (_ bv8 256)) (indexWord8 w)
  (ite (= idx (_ bv7 256)) (indexWord7 w)
  (ite (= idx (_ bv6 256)) (indexWord6 w)
  (ite (= idx (_ bv5 256)) (indexWord5 w)
  (ite (= idx (_ bv4 256)) (indexWord4 w)
  (ite (= idx (_ bv3 256)) (indexWord3 w)
  (ite (= idx (_ bv2 256)) (indexWord2 w)
  (ite (= idx (_ bv1 256)) (indexWord1 w)
  (indexWord0 w)
  ))))))))))))))))))))))))))))))))
)

; buffers
(define-const emptyBuf Buf ((as const Buf) #b00000000))

(define-fun readWord ((idx Word) (buf Buf)) Word
  (concat
    (select buf idx)
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000001))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000002))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000003))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000004))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000005))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000006))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000007))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000008))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000009))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000a))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000b))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000c))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000d))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000e))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000f))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000010))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000011))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000012))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000013))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000014))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000015))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000016))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000017))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000018))
    (select buf (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000019))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001a))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001b))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001c))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001d))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001e))
    (select buf (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001f))
  )
)

(define-fun writeWord ((idx Word) (val Word) (buf Buf)) Buf
    (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store
    (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store buf
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001f) (indexWord31 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001e) (indexWord30 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001d) (indexWord29 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001c) (indexWord28 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001b) (indexWord27 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000001a) (indexWord26 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000019) (indexWord25 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000018) (indexWord24 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000017) (indexWord23 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000016) (indexWord22 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000015) (indexWord21 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000014) (indexWord20 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000013) (indexWord19 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000012) (indexWord18 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000011) (indexWord17 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000010) (indexWord16 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000f) (indexWord15 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000e) (indexWord14 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000d) (indexWord13 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000c) (indexWord12 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000b) (indexWord11 val))
    (bvadd idx #x000000000000000000000000000000000000000000000000000000000000000a) (indexWord10 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000009) (indexWord9 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000008) (indexWord8 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000007) (indexWord7 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000006) (indexWord6 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000005) (indexWord5 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000004) (indexWord4 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000003) (indexWord3 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000002) (indexWord2 val))
    (bvadd idx #x0000000000000000000000000000000000000000000000000000000000000001) (indexWord1 val))
    idx (indexWord0 val))
)

; block context
(declare-fun blockhash (Word) Word)

; macros
(define-fun signext ( (b Word) (val Word)) Word
  (ite (= b (_ bv0  256)) ((_ sign_extend 248) ((_ extract 7    0) val))
  (ite (= b (_ bv1  256)) ((_ sign_extend 240) ((_ extract 15   0) val))
  (ite (= b (_ bv2  256)) ((_ sign_extend 232) ((_ extract 23   0) val))
  (ite (= b (_ bv3  256)) ((_ sign_extend 224) ((_ extract 31   0) val))
  (ite (= b (_ bv4  256)) ((_ sign_extend 216) ((_ extract 39   0) val))
  (ite (= b (_ bv5  256)) ((_ sign_extend 208) ((_ extract 47   0) val))
  (ite (= b (_ bv6  256)) ((_ sign_extend 200) ((_ extract 55   0) val))
  (ite (= b (_ bv7  256)) ((_ sign_extend 192) ((_ extract 63   0) val))
  (ite (= b (_ bv8  256)) ((_ sign_extend 184) ((_ extract 71   0) val))
  (ite (= b (_ bv9  256)) ((_ sign_extend 176) ((_ extract 79   0) val))
  (ite (= b (_ bv10 256)) ((_ sign_extend 168) ((_ extract 87   0) val))
  (ite (= b (_ bv11 256)) ((_ sign_extend 160) ((_ extract 95   0) val))
  (ite (= b (_ bv12 256)) ((_ sign_extend 152) ((_ extract 103  0) val))
  (ite (= b (_ bv13 256)) ((_ sign_extend 144) ((_ extract 111  0) val))
  (ite (= b (_ bv14 256)) ((_ sign_extend 136) ((_ extract 119  0) val))
  (ite (= b (_ bv15 256)) ((_ sign_extend 128) ((_ extract 127  0) val))
  (ite (= b (_ bv16 256)) ((_ sign_extend 120) ((_ extract 135  0) val))
  (ite (= b (_ bv17 256)) ((_ sign_extend 112) ((_ extract 143  0) val))
  (ite (= b (_ bv18 256)) ((_ sign_extend 104) ((_ extract 151  0) val))
  (ite (= b (_ bv19 256)) ((_ sign_extend 96 ) ((_ extract 159  0) val))
  (ite (= b (_ bv20 256)) ((_ sign_extend 88 ) ((_ extract 167  0) val))
  (ite (= b (_ bv21 256)) ((_ sign_extend 80 ) ((_ extract 175  0) val))
  (ite (= b (_ bv22 256)) ((_ sign_extend 72 ) ((_ extract 183  0) val))
  (ite (= b (_ bv23 256)) ((_ sign_extend 64 ) ((_ extract 191  0) val))
  (ite (= b (_ bv24 256)) ((_ sign_extend 56 ) ((_ extract 199  0) val))
  (ite (= b (_ bv25 256)) ((_ sign_extend 48 ) ((_ extract 207  0) val))
  (ite (= b (_ bv26 256)) ((_ sign_extend 40 ) ((_ extract 215  0) val))
  (ite (= b (_ bv27 256)) ((_ sign_extend 32 ) ((_ extract 223  0) val))
  (ite (= b (_ bv28 256)) ((_ sign_extend 24 ) ((_ extract 231  0) val))
  (ite (= b (_ bv29 256)) ((_ sign_extend 16 ) ((_ extract 239  0) val))
  (ite (= b (_ bv30 256)) ((_ sign_extend 8  ) ((_ extract 247  0) val)) val))))))))))))))))))))))))))))))))

; storage
(declare-const abstractStore Storage)
(define-const emptyStore Storage ((as const Storage) ((as const (Array (_ BitVec 256) (_ BitVec 256))) #x0000000000000000000000000000000000000000000000000000000000000000)))

(define-fun sstore ((addr Word) (key Word) (val Word) (storage Storage)) Storage (store storage addr (store (select storage addr) key val)))

(define-fun sload ((addr Word) (key Word) (storage Storage)) Word (select (select storage addr) key))

; buffers
(declare-const txdata (Array (_ BitVec 256) (_ BitVec 8)))
; buffer lengths
(declare-const txdata_length (_ BitVec 256))

; variables

; frame context
(declare-const caller_0 (_ BitVec 256))
(assert (and (bvuge caller_0 (_ bv0 256)) (bvule caller_0 (_ bv1461501637330902918203684832716283019655932542975 256))))
(declare-const callvalue_0 (_ BitVec 256))

; block context

; intermediate buffers & stores
(define-const buf0 Buf (writeWord (_ bv0 256) (bvand (_ bv1461501637330902918203684832716283019655932542975 256) (readWord (_ bv4 256) txdata)) (store (store emptyBuf (_ bv63 256) (_ bv2 8)) (_ bv95 256) (_ bv128 8))))
(define-const buf0_length (_ BitVec 256) (_ bv96 256))
(define-const buf1 Buf (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store emptyBuf (_ bv0 256) (select buf0 (_ bv0 256))) (_ bv1 256) (select buf0 (_ bv1 256))) (_ bv2 256) (select buf0 (_ bv2 256))) (_ bv3 256) (select buf0 (_ bv3 256))) (_ bv4 256) (select buf0 (_ bv4 256))) (_ bv5 256) (select buf0 (_ bv5 256))) (_ bv6 256) (select buf0 (_ bv6 256))) (_ bv7 256) (select buf0 (_ bv7 256))) (_ bv8 256) (select buf0 (_ bv8 256))) (_ bv9 256) (select buf0 (_ bv9 256))) (_ bv10 256) (select buf0 (_ bv10 256))) (_ bv11 256) (select buf0 (_ bv11 256))) (_ bv12 256) (select buf0 (_ bv12 256))) (_ bv13 256) (select buf0 (_ bv13 256))) (_ bv14 256) (select buf0 (_ bv14 256))) (_ bv15 256) (select buf0 (_ bv15 256))) (_ bv16 256) (select buf0 (_ bv16 256))) (_ bv17 256) (select buf0 (_ bv17 256))) (_ bv18 256) (select buf0 (_ bv18 256))) (_ bv19 256) (select buf0 (_ bv19 256))) (_ bv20 256) (select buf0 (_ bv20 256))) (_ bv21 256) (select buf0 (_ bv21 256))) (_ bv22 256) (select buf0 (_ bv22 256))) (_ bv23 256) (select buf0 (_ bv23 256))) (_ bv24 256) (select buf0 (_ bv24 256))) (_ bv25 256) (select buf0 (_ bv25 256))) (_ bv26 256) (select buf0 (_ bv26 256))) (_ bv27 256) (select buf0 (_ bv27 256))) (_ bv28 256) (select buf0 (_ bv28 256))) (_ bv29 256) (select buf0 (_ bv29 256))) (_ bv30 256) (select buf0 (_ bv30 256))) (_ bv31 256) (select buf0 (_ bv31 256))) (_ bv32 256) (select buf0 (_ bv32 256))) (_ bv33 256) (select buf0 (_ bv33 256))) (_ bv34 256) (select buf0 (_ bv34 256))) (_ bv35 256) (select buf0 (_ bv35 256))) (_ bv36 256) (select buf0 (_ bv36 256))) (_ bv37 256) (select buf0 (_ bv37 256))) (_ bv38 256) (select buf0 (_ bv38 256))) (_ bv39 256) (select buf0 (_ bv39 256))) (_ bv40 256) (select buf0 (_ bv40 256))) (_ bv41 256) (select buf0 (_ bv41 256))) (_ bv42 256) (select buf0 (_ bv42 256))) (_ bv43 256) (select buf0 (_ bv43 256))) (_ bv44 256) (select buf0 (_ bv44 256))) (_ bv45 256) (select buf0 (_ bv45 256))) (_ bv46 256) (select buf0 (_ bv46 256))) (_ bv47 256) (select buf0 (_ bv47 256))) (_ bv48 256) (select buf0 (_ bv48 256))) (_ bv49 256) (select buf0 (_ bv49 256))) (_ bv50 256) (select buf0 (_ bv50 256))) (_ bv51 256) (select buf0 (_ bv51 256))) (_ bv52 256) (select buf0 (_ bv52 256))) (_ bv53 256) (select buf0 (_ bv53 256))) (_ bv54 256) (select buf0 (_ bv54 256))) (_ bv55 256) (select buf0 (_ bv55 256))) (_ bv56 256) (select buf0 (_ bv56 256))) (_ bv57 256) (select buf0 (_ bv57 256))) (_ bv58 256) (select buf0 (_ bv58 256))) (_ bv59 256) (select buf0 (_ bv59 256))) (_ bv60 256) (select buf0 (_ bv60 256))) (_ bv61 256) (select buf0 (_ bv61 256))) (_ bv62 256) (select buf0 (_ bv62 256))) (_ bv63 256) (select buf0 (_ bv63 256))))
(define-const buf1_length (_ BitVec 256) (_ bv64 256))
(define-const buf2 Buf (writeWord (_ bv0 256) (bvand (_ bv1461501637330902918203684832716283019655932542975 256) caller_0) (store (store emptyBuf (_ bv63 256) (_ bv2 8)) (_ bv95 256) (_ bv128 8))))
(define-const buf2_length (_ BitVec 256) (_ bv96 256))
(define-const buf3 Buf (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store (store emptyBuf (_ bv0 256) (select buf2 (_ bv0 256))) (_ bv1 256) (select buf2 (_ bv1 256))) (_ bv2 256) (select buf2 (_ bv2 256))) (_ bv3 256) (select buf2 (_ bv3 256))) (_ bv4 256) (select buf2 (_ bv4 256))) (_ bv5 256) (select buf2 (_ bv5 256))) (_ bv6 256) (select buf2 (_ bv6 256))) (_ bv7 256) (select buf2 (_ bv7 256))) (_ bv8 256) (select buf2 (_ bv8 256))) (_ bv9 256) (select buf2 (_ bv9 256))) (_ bv10 256) (select buf2 (_ bv10 256))) (_ bv11 256) (select buf2 (_ bv11 256))) (_ bv12 256) (select buf2 (_ bv12 256))) (_ bv13 256) (select buf2 (_ bv13 256))) (_ bv14 256) (select buf2 (_ bv14 256))) (_ bv15 256) (select buf2 (_ bv15 256))) (_ bv16 256) (select buf2 (_ bv16 256))) (_ bv17 256) (select buf2 (_ bv17 256))) (_ bv18 256) (select buf2 (_ bv18 256))) (_ bv19 256) (select buf2 (_ bv19 256))) (_ bv20 256) (select buf2 (_ bv20 256))) (_ bv21 256) (select buf2 (_ bv21 256))) (_ bv22 256) (select buf2 (_ bv22 256))) (_ bv23 256) (select buf2 (_ bv23 256))) (_ bv24 256) (select buf2 (_ bv24 256))) (_ bv25 256) (select buf2 (_ bv25 256))) (_ bv26 256) (select buf2 (_ bv26 256))) (_ bv27 256) (select buf2 (_ bv27 256))) (_ bv28 256) (select buf2 (_ bv28 256))) (_ bv29 256) (select buf2 (_ bv29 256))) (_ bv30 256) (select buf2 (_ bv30 256))) (_ bv31 256) (select buf2 (_ bv31 256))) (_ bv32 256) (select buf2 (_ bv32 256))) (_ bv33 256) (select buf2 (_ bv33 256))) (_ bv34 256) (select buf2 (_ bv34 256))) (_ bv35 256) (select buf2 (_ bv35 256))) (_ bv36 256) (select buf2 (_ bv36 256))) (_ bv37 256) (select buf2 (_ bv37 256))) (_ bv38 256) (select buf2 (_ bv38 256))) (_ bv39 256) (select buf2 (_ bv39 256))) (_ bv40 256) (select buf2 (_ bv40 256))) (_ bv41 256) (select buf2 (_ bv41 256))) (_ bv42 256) (select buf2 (_ bv42 256))) (_ bv43 256) (select buf2 (_ bv43 256))) (_ bv44 256) (select buf2 (_ bv44 256))) (_ bv45 256) (select buf2 (_ bv45 256))) (_ bv46 256) (select buf2 (_ bv46 256))) (_ bv47 256) (select buf2 (_ bv47 256))) (_ bv48 256) (select buf2 (_ bv48 256))) (_ bv49 256) (select buf2 (_ bv49 256))) (_ bv50 256) (select buf2 (_ bv50 256))) (_ bv51 256) (select buf2 (_ bv51 256))) (_ bv52 256) (select buf2 (_ bv52 256))) (_ bv53 256) (select buf2 (_ bv53 256))) (_ bv54 256) (select buf2 (_ bv54 256))) (_ bv55 256) (select buf2 (_ bv55 256))) (_ bv56 256) (select buf2 (_ bv56 256))) (_ bv57 256) (select buf2 (_ bv57 256))) (_ bv58 256) (select buf2 (_ bv58 256))) (_ bv59 256) (select buf2 (_ bv59 256))) (_ bv60 256) (select buf2 (_ bv60 256))) (_ bv61 256) (select buf2 (_ bv61 256))) (_ bv62 256) (select buf2 (_ bv62 256))) (_ bv63 256) (select buf2 (_ bv63 256))))
(define-const buf3_length (_ BitVec 256) (_ bv64 256))
(define-const store4 Storage (sstore (_ bv44203 256) (keccak buf3) (bvsub (sload (_ bv44203 256) (keccak buf3) abstractStore) (readWord (_ bv36 256) txdata)) abstractStore))

; keccak assumptions
(assert (or (= buf1 buf3) (not (= (keccak buf1) (keccak buf3)))))
(assert (bvugt (keccak buf1) (_ bv50 256)))
(assert (bvugt (keccak buf3) (_ bv50 256)))
; read assumptions
(assert (=> (bvuge (_ bv36 256) (max (_ bv0 256) txdata_length)) (= (readWord (_ bv36 256) txdata) (_ bv0 256))))
(assert (=> (bvuge (_ bv4 256) (max (_ bv0 256) txdata_length)) (= (readWord (_ bv4 256) txdata) (_ bv0 256))))
(assert (=> (bvuge (_ bv0 256) (max (_ bv0 256) txdata_length)) (= (select txdata (_ bv0 256)) (_ bv0 8))))
(assert (=> (bvuge (_ bv1 256) (max (_ bv0 256) txdata_length)) (= (select txdata (_ bv1 256)) (_ bv0 8))))
(assert (=> (bvuge (_ bv2 256) (max (_ bv0 256) txdata_length)) (= (select txdata (_ bv2 256)) (_ bv0 8))))
(assert (=> (bvuge (_ bv3 256) (max (_ bv0 256) txdata_length)) (= (select txdata (_ bv3 256)) (_ bv0 8))))

(assert (not false))
(assert (bvult (max (_ bv0 256) txdata_length) (_ bv18446744073709551616 256)))
(assert (= (_ bv0 256) (_ bv0 256)))
(assert (not (= (ite (= (ite (bvult (bvadd (readWord (_ bv36 256) txdata) (sload (_ bv44203 256) (keccak buf1) store4)) (sload (_ bv44203 256) (keccak buf1) store4)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (bvult (sload (_ bv44203 256) (keccak buf3) abstractStore) (bvsub (sload (_ bv44203 256) (keccak buf3) abstractStore) (readWord (_ bv36 256) txdata))) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (= (ite (= caller_0 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) caller_0)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= caller_0 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) caller_0)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (bvult (sload (_ bv44203 256) (keccak buf3) abstractStore) (readWord (_ bv36 256) txdata)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (readWord (_ bv4 256) txdata) (bvand (_ bv1461501637330902918203684832716283019655932542975 256) (readWord (_ bv4 256) txdata))) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (bvslt (bvsub txdata_length (_ bv4 256)) (_ bv64 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (_ bv2835717307 256) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256)))))))))))))))))))))))))))))))))) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (= (ite (= (_ bv2646777772 256) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256)))))))))))))))))))))))))))))))))) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (= (ite (bvult (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256))))))))))))))))))))))))))))))))) (_ bv2646777772 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (= (ite (bvult (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256))))))))))))))))))))))))))))))))) (_ bv1889567281 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (= (ite (bvult txdata_length (_ bv4 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (not (= (ite (= callvalue_0 (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (bvult txdata_length (_ bv18446744073709551616 256)))
(assert (not (= (ite (= (ite (bvult (bvadd (readWord (_ bv36 256) txdata) (sload (_ bv44203 256) (keccak buf1) store4)) (sload (_ bv44203 256) (keccak buf1) store4)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (bvult (sload (_ bv44203 256) (keccak buf3) abstractStore) (bvsub (sload (_ bv44203 256) (keccak buf3) abstractStore) (readWord (_ bv36 256) txdata))) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (= (ite (= caller_0 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) caller_0)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= caller_0 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) caller_0)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (bvult (sload (_ bv44203 256) (keccak buf3) abstractStore) (readWord (_ bv36 256) txdata)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (readWord (_ bv4 256) txdata) (bvand (_ bv1461501637330902918203684832716283019655932542975 256) (readWord (_ bv4 256) txdata))) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (ite (bvslt (bvsub txdata_length (_ bv4 256)) (_ bv64 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (not (= (ite (= (_ bv2835717307 256) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256)))))))))))))))))))))))))))))))))) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))
(assert (= (ite (= (_ bv2646777772 256) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256)))))))))))))))))))))))))))))))))) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (= (ite (bvult (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256))))))))))))))))))))))))))))))))) (_ bv2646777772 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (= (ite (bvult (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (_ bv0 8) (concat (select txdata (_ bv0 256)) (concat (select txdata (_ bv1 256)) (concat (select txdata (_ bv2 256)) (select txdata (_ bv3 256))))))))))))))))))))))))))))))))) (_ bv1889567281 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (= (ite (bvult txdata_length (_ bv4 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256)))
(assert (not (= (ite (= callvalue_0 (_ bv0 256)) (_ bv1 256) (_ bv0 256)) (_ bv0 256))))


(check-sat)